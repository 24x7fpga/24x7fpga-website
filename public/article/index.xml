<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Articles on Home</title>
    <link>https://24x7fpga.com/article/</link>
    <description>Recent content in Articles on Home</description>
    <generator>Hugo -- 0.142.0</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 17 Jul 2024 09:17:00 -0400</lastBuildDate>
    <atom:link href="https://24x7fpga.com/article/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Credit-Based Flow Control</title>
      <link>https://24x7fpga.com/article/2024_07_17_09_17_26_credit_based_flow_control/</link>
      <pubDate>Wed, 17 Jul 2024 09:17:00 -0400</pubDate>
      <guid>https://24x7fpga.com/article/2024_07_17_09_17_26_credit_based_flow_control/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://verilog-meetup.com/2025/02/11/credit-based-flow-control/&#34;&gt;Published Article&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Flow control is a crucial synchronization technique for data transmission. It ensures the efficient flow of data between the transmitter and the receiver by maintaining a balance between the data production rate of the sender and the data consumption rate of the receiver. The data that is being transmitted is buffered to maintain the balance between the transmitter and the receiver. The control mechanism holds the intermediate data in the buffer until the receiver is ready to process the data. The most commonly implemented control mechanism in hardware is &amp;ldquo;Valid/Ready Handshake Protocol&amp;rdquo;, where the sender asserts a &amp;ldquo;valid&amp;rdquo; signal when the data is ready to be transmitted, the receiver asserts a &amp;ldquo;ready&amp;rdquo; signal when it is ready to receive data, data transfer occurs only when both valid and ready signals are asserted. This mechanism was studied in detail in a pipeline design example in &lt;a href=&#34;https://24x7fpga.com/article/2024_06_18_16_45_29_a_case_study_on_effective_pipeline_design_in_digital_systems/&#34;&gt;A Case Study on Effective Pipeline Design in Digital Systems&lt;/a&gt;. Here, we will look at a flow control mechanism that is mostly implemented in Network-on-Chips (NoCs) called credit-based flow control.&lt;/p&gt;</description>
    </item>
    <item>
      <title>A Case Study on Effective Pipeline Design in Digital Systems</title>
      <link>https://24x7fpga.com/article/2024_06_18_16_45_29_a_case_study_on_effective_pipeline_design_in_digital_systems/</link>
      <pubDate>Tue, 18 Jun 2024 16:45:00 -0400</pubDate>
      <guid>https://24x7fpga.com/article/2024_06_18_16_45_29_a_case_study_on_effective_pipeline_design_in_digital_systems/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://verilog-meetup.com/2024/06/20/a-case-study-on-effective-pipeline-design-in-digital-system/&#34;&gt;Published Article&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Throughput and latency are fundamental concepts in moderm digital system. Throughput refers to the time the system takes to process the data per clock cycle where latency refers to the time it takes for the data to travese from one location to another to complete an operation. High throughput and low latency are essentail for today&amp;rsquo;s fast-paced digital world. For example, higher throughput ensure smooth and uninterrupted audio and video streaming and low latency provides seamless and responsive gaming experience reducing lag. It is necessary to strike a balance between high throughput and low latency. By processing more data simultaneously, you can boost throughput, but only if the system can handle the additional load. Therefore, digital designers need to find the right balance depending on the specific requirement for the system. The two most commonly implemented statergies to improve throughput is pipeling and parallel processing.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>