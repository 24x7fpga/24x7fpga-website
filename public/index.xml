<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Home</title>
    <link>https://24x7fpga.com/</link>
    <description>Recent content on Home</description>
    <generator>Hugo -- 0.142.0</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 30 Mar 2025 13:46:00 -0400</lastBuildDate>
    <atom:link href="https://24x7fpga.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Voltage Source, Current Source and Dependent Source</title>
      <link>https://24x7fpga.com/ams_directory/2025_03_30_voltage_source_current_source_and_dependent_source/</link>
      <pubDate>Sun, 30 Mar 2025 13:46:00 -0400</pubDate>
      <guid>https://24x7fpga.com/ams_directory/2025_03_30_voltage_source_current_source_and_dependent_source/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://24x7fpga.com/ams_directory/2025_03_13_ams_directory/&#34;&gt;AMS Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;d41d8c&#34;&gt;&lt;/h2&gt;
&lt;h3 id=&#34;voltage-source&#34;&gt;Voltage Source&lt;/h3&gt;
&lt;p&gt;A voltage source is an electrical component that provide constant or varying voltage between two terminals. It is a key component in circuit that is responsible for pushing electric charge through a closed circuit.&lt;/p&gt;
&lt;h4 id=&#34;variable-and-constant-voltage-source&#34;&gt;Variable and Constant Voltage Source&lt;/h4&gt;
&lt;p&gt;A variable voltage source is one that varies its voltage over time. THe variations can be adjusted manully via nknob or automatic via signal generator. These sources are useful for testing and controlling circuits with different voltage requirements.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Current, Voltage and Resistor</title>
      <link>https://24x7fpga.com/ams_directory/2025_03_13_current_voltage_and_resistor/</link>
      <pubDate>Thu, 13 Mar 2025 12:40:00 -0400</pubDate>
      <guid>https://24x7fpga.com/ams_directory/2025_03_13_current_voltage_and_resistor/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://24x7fpga.com/ams_directory/2025_03_13_ams_directory/&#34;&gt;AMS Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;d41d8c&#34;&gt;&lt;/h2&gt;
&lt;h3 id=&#34;current&#34;&gt;Current&lt;/h3&gt;
&lt;p&gt;Current occurs when electic charge (Q) flows through a wire. The current passing through the wire can be given as the amount of charge &lt;strong&gt;Q&lt;/strong&gt; passing through a wire in a given time &lt;strong&gt;t&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The general definition of current is given as the rate at which the charge passes through a wire.&lt;/p&gt;
&lt;p&gt;\begin{equation}
\label{eq.1}
I = \frac{dQ}{dt}
\end{equation}&lt;/p&gt;
&lt;p&gt;where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I is current in amperes, A&lt;/li&gt;
&lt;li&gt;Q is charge in coulomb, Q&lt;/li&gt;
&lt;li&gt;t is time in seconds, s&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Current is measured in &lt;em&gt;amperes (A)&lt;/em&gt; and charge is represented as &lt;em&gt;coulomb Q&lt;/em&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>AMS Directory</title>
      <link>https://24x7fpga.com/ams_directory/2025_03_13_ams_directory/</link>
      <pubDate>Thu, 13 Mar 2025 12:37:00 -0400</pubDate>
      <guid>https://24x7fpga.com/ams_directory/2025_03_13_ams_directory/</guid>
      <description>&lt;h2 id=&#34;basic-circuit&#34;&gt;Basic Circuit&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/ams_directory/2025_03_13_current_voltage_and_resistor/&#34;&gt;Current, Voltage and Resistor&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/ams_directory/2025_03_30_voltage_source_current_source_and_dependent_source/&#34;&gt;Voltage Source, Current Source and Dependent Source&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Data Path</title>
      <link>https://24x7fpga.com/riscv_directory/2025_02_22_data_path/</link>
      <pubDate>Sat, 22 Feb 2025 15:23:00 -0500</pubDate>
      <guid>https://24x7fpga.com/riscv_directory/2025_02_22_data_path/</guid>
      <description>&lt;h2 id=&#34;d41d8c&#34;&gt;&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s begin by constructing the data path to establish the flow of data. We&amp;rsquo;ll start with a simple instruction, analyze its requirements, and gradually build upon it to develop a more comprehensive understanding.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-assembly&#34; data-lang=&#34;assembly&#34;&gt;addi x5, zero, 6
addi x6, zero, 7
add  x7, x5, x6
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The hexadecimal format of the above instruction are stored in a memory file that will be read during program execution.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;00600293        // addi x5 x0 6
00700313        // addi x6 x0 7
006283b3        // add x7 x5 x6
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;instruction-fetch&#34;&gt;Instruction Fetch&lt;/h3&gt;
&lt;p&gt;Every instruction typically follows these two fundamental steps:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Microarchitecture Overview</title>
      <link>https://24x7fpga.com/riscv_directory/2025_02_21_microarchitecture_overview/</link>
      <pubDate>Fri, 21 Feb 2025 14:59:00 -0500</pubDate>
      <guid>https://24x7fpga.com/riscv_directory/2025_02_21_microarchitecture_overview/</guid>
      <description>&lt;h2 id=&#34;d41d8c&#34;&gt;&lt;/h2&gt;
&lt;p&gt;Figure 1 illustrates a simplified RISC-V microarchitecture, highlighting only the major functional units. These units play a crucial role in executing instructions efficiently. The key components can be categorized as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Program Counter (PC) – Keeps track of the instruction sequence by incrementing to the next program instruction on every clock cycle.&lt;/li&gt;
&lt;li&gt;Instruction Memory – Stores the program instructions that are fetched and executed sequentially.&lt;/li&gt;
&lt;li&gt;Register File – Receives instructions from the instruction memory, decodes them, and provides the appropriate inputs to the ALU.&lt;/li&gt;
&lt;li&gt;Arithmetic Logic Unit (ALU) – Performs mathematical and logical operations on the provided inputs.&lt;/li&gt;
&lt;li&gt;Data Memory – Stores ALU results or acts as a temporary storage unit for data required in future computations.&lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;https://24x7fpga.com/ox-hugo/risc_v_functional_units.svg&#34;
         alt=&#34;Figure 1: Abstract Microarchitecture Overview&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 1: &lt;!-- raw HTML omitted --&gt;Abstract Microarchitecture Overview&lt;/p&gt;</description>
    </item>
    <item>
      <title>J-Type</title>
      <link>https://24x7fpga.com/riscv_directory/2025_02_20_j_type/</link>
      <pubDate>Thu, 20 Feb 2025 12:29:00 -0500</pubDate>
      <guid>https://24x7fpga.com/riscv_directory/2025_02_20_j_type/</guid>
      <description>&lt;p&gt;The J-type (&lt;em&gt;jump&lt;/em&gt;) instruction is similar to the U-type instruction but differs only in the way the immediate field is arranged. Figure 1 describes how the J-type instruction format is divided into its respective fields.&lt;/p&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;https://24x7fpga.com/ox-hugo/j_type.svg&#34;
         alt=&#34;Figure 1: Instruction Format&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 1: &lt;!-- raw HTML omitted --&gt;Instruction Format&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;Opcode: The opcode or operation code is a &lt;code&gt;7-bit&lt;/code&gt; field that defines the type of operation to be performed.&lt;/li&gt;
&lt;li&gt;Destination Register: Stores the result of the operation in the destination register &lt;code&gt;rd&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Immediate Field: A &lt;code&gt;20-bit&lt;/code&gt; immediate value is the difference of the label address and &lt;code&gt;jal&lt;/code&gt; address such that the addition of the &lt;code&gt;jal&lt;/code&gt; and &lt;code&gt;diff&lt;/code&gt; is equal to label address.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The ordinary &lt;code&gt;j&lt;/code&gt; jump instruction is encoded as &lt;code&gt;jal&lt;/code&gt; where &lt;code&gt;rd&lt;/code&gt; is set to &lt;em&gt;zero&lt;/em&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>U-Type</title>
      <link>https://24x7fpga.com/riscv_directory/2025_02_20_u_type/</link>
      <pubDate>Thu, 20 Feb 2025 12:17:00 -0500</pubDate>
      <guid>https://24x7fpga.com/riscv_directory/2025_02_20_u_type/</guid>
      <description>&lt;p&gt;The U-type (&lt;em&gt;upper immediate&lt;/em&gt;) instruction has one destination register &lt;code&gt;rd&lt;/code&gt; and one immediate fields &lt;code&gt;imm&lt;/code&gt; which is 20-bit. Figure 1 shows the instruction format for the U-type instruction.&lt;/p&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;https://24x7fpga.com/ox-hugo/u_type.svg&#34;
         alt=&#34;Figure 1: Instruction Format&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 1: &lt;!-- raw HTML omitted --&gt;Instruction Format&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;Opcode: The opcode or operation code is a &lt;code&gt;7-bit&lt;/code&gt; field that defines the type of operation to be performed.&lt;/li&gt;
&lt;li&gt;Destination Register: Stores the result of the operation in the destination register &lt;code&gt;rd&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Immediate Field: A &lt;code&gt;20-bit&lt;/code&gt; immediate value is specified in here.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Below is table that describes the list of U-type instructions.&lt;/p&gt;</description>
    </item>
    <item>
      <title>B-Type</title>
      <link>https://24x7fpga.com/riscv_directory/2025_02_20_b_type/</link>
      <pubDate>Thu, 20 Feb 2025 11:53:00 -0500</pubDate>
      <guid>https://24x7fpga.com/riscv_directory/2025_02_20_b_type/</guid>
      <description>&lt;p&gt;The B-type (&lt;em&gt;branch&lt;/em&gt;) instruction is similar to the S-type (&lt;em&gt;store&lt;/em&gt;) instruction. It differs slightly with the use of immediate values. Figure 1 illustrate the fields of the &lt;em&gt;branch&lt;/em&gt; type instruction.&lt;/p&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;https://24x7fpga.com/ox-hugo/b_type.svg&#34;
         alt=&#34;Figure 1: Instruction Format&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 1: &lt;!-- raw HTML omitted --&gt;Instruction Format&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;Opcode: The opcode or operation code is a 7-bit field that defines the type of operation to be performed.&lt;/li&gt;
&lt;li&gt;Function Field: This 3-bit &lt;code&gt;funct3&lt;/code&gt; field, known as the &lt;strong&gt;control bits&lt;/strong&gt;, determines the specific operation to be executed such as store byte (&lt;code&gt;sb&lt;/code&gt;), store half (&lt;code&gt;sh&lt;/code&gt;) and store word (&lt;code&gt;sw&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Registers: The register &lt;code&gt;rs1&lt;/code&gt; is the base address of source register and &lt;code&gt;rs2&lt;/code&gt; is the value to be stored to memory.&lt;/li&gt;
&lt;li&gt;Immeditate Field: The two immediate fields together make up 13-bit signed offset number for the base address in &lt;code&gt;rs1&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Immeditate instruction is describe much more clearly w.r.t to the &lt;em&gt;branch&lt;/em&gt; instruction &lt;code&gt;instr&lt;/code&gt; below:&lt;/p&gt;</description>
    </item>
    <item>
      <title>S-Type</title>
      <link>https://24x7fpga.com/riscv_directory/2025_02_20_s_type/</link>
      <pubDate>Thu, 20 Feb 2025 11:25:00 -0500</pubDate>
      <guid>https://24x7fpga.com/riscv_directory/2025_02_20_s_type/</guid>
      <description>&lt;p&gt;The S-type (&lt;em&gt;store&lt;/em&gt;) instruction operates on two registers and one immediate operand. There are two immediate fields that together form a 12-bit signed immediate value. Figure 1 illustrates the instruction format for an S-type instruction, showing how the register, opcode, and immediate fields are segregated.&lt;/p&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;https://24x7fpga.com/ox-hugo/s_type.svg&#34;
         alt=&#34;Figure 1: Instruction Format&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 1: &lt;!-- raw HTML omitted --&gt;Instruction Format&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;Opcode: The opcode or operation code is a 7-bit field that defines the type of operation to be performed.&lt;/li&gt;
&lt;li&gt;Function Field: This 3-bit &lt;code&gt;funct3&lt;/code&gt; field, known as the &lt;strong&gt;control bits&lt;/strong&gt;, determines the specific operation to be executed such as store byte (&lt;code&gt;sb&lt;/code&gt;), store half (&lt;code&gt;sh&lt;/code&gt;) and store word (&lt;code&gt;sw&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Registers: The register &lt;code&gt;rs1&lt;/code&gt; is the base address of source register and &lt;code&gt;rs2&lt;/code&gt; is the value to be stored to memory.&lt;/li&gt;
&lt;li&gt;Immeditate Field: The two immediate fields together make up 12-bit signed offset number for the base address in &lt;code&gt;rs1&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Below is table that describes the list of S-type instructions.&lt;/p&gt;</description>
    </item>
    <item>
      <title>I-Type</title>
      <link>https://24x7fpga.com/riscv_directory/2025_02_19_i_type/</link>
      <pubDate>Wed, 19 Feb 2025 14:53:00 -0500</pubDate>
      <guid>https://24x7fpga.com/riscv_directory/2025_02_19_i_type/</guid>
      <description>&lt;p&gt;The I-type (&lt;em&gt;Immediate&lt;/em&gt;) instruction performs operations using one register and one immediate operand. The result of the operation is stored in the destination register &lt;code&gt;rd&lt;/code&gt;. Figure 1 illustrates the instruction format for an I-type instruction, showing how the opcode, source register &lt;code&gt;rs1&lt;/code&gt;, immediate value, and function fields are structured.&lt;/p&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;https://24x7fpga.com/ox-hugo/i_type.svg&#34;
         alt=&#34;Figure 1: Instruction Format&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 1: &lt;!-- raw HTML omitted --&gt;Instruction Format&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;Opcode: The opcode or operation code is a &lt;code&gt;7-bit&lt;/code&gt; field that defines the type of operation to be performed on the data stored in the source registers.&lt;/li&gt;
&lt;li&gt;Destination Register: Stores the result of the operation in the destination register &lt;code&gt;rd&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Function Fields: This 3-bit &lt;code&gt;funct3&lt;/code&gt; field, known as the &lt;strong&gt;control bits&lt;/strong&gt;, determines the specific operation to be executed.
&lt;ul&gt;
&lt;li&gt;Source Registers: A single source register &lt;code&gt;rs1&lt;/code&gt; of 5-bit field holds the address of the input operand.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Immediate Field: The immediate oprand used to I-type instruction.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note: The immediate is 12-bit signed (two&amp;rsquo;s complement) number for all I-type instruction except immediate shit instructions (slli, srli, srai).&lt;/p&gt;</description>
    </item>
    <item>
      <title>R-Type</title>
      <link>https://24x7fpga.com/riscv_directory/2025_02_18_r_type/</link>
      <pubDate>Tue, 18 Feb 2025 12:47:00 -0500</pubDate>
      <guid>https://24x7fpga.com/riscv_directory/2025_02_18_r_type/</guid>
      <description>&lt;p&gt;The R-type (&lt;em&gt;register-type&lt;/em&gt;) instruction in RISC-V operates on three registers. Two of these registers serve as source registers &lt;code&gt;rs2&lt;/code&gt; and &lt;code&gt;rs1&lt;/code&gt;, providing the input operands, while the third register &lt;code&gt;rd&lt;/code&gt; functions as the destination register, storing the result of the operation. This format is commonly used for arithmetic and logical operations in the instruction set. Figure 1, illustrates the instruction format of the R-type instruction.&lt;/p&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;https://24x7fpga.com/ox-hugo/r_type.svg&#34;
         alt=&#34;Figure 1: Instruction Format&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 1: &lt;!-- raw HTML omitted --&gt;Instruction Format&lt;/p&gt;</description>
    </item>
    <item>
      <title>RISC-V Register Set</title>
      <link>https://24x7fpga.com/riscv_directory/2025_02_14_risc_v_register_set/</link>
      <pubDate>Fri, 14 Feb 2025 15:38:00 -0500</pubDate>
      <guid>https://24x7fpga.com/riscv_directory/2025_02_14_risc_v_register_set/</guid>
      <description>&lt;h2 id=&#34;d41d8c&#34;&gt;&lt;/h2&gt;
&lt;p&gt;Registers are fundamental components of a processor, serving as high-speed storage units that enable the CPU to access data, addresses, and instructions efficiently. Since registers are located within the CPU, they provide significantly faster access compared to main memory, enhancing overall execution speed. The table below outlines the registers used in a RISC-V CPU and their functions.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Name&lt;/th&gt;
          &lt;th&gt;Register Name&lt;/th&gt;
          &lt;th&gt;Description&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;zero&lt;/td&gt;
          &lt;td&gt;x0&lt;/td&gt;
          &lt;td&gt;Constant Value 0&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;ra&lt;/td&gt;
          &lt;td&gt;x1&lt;/td&gt;
          &lt;td&gt;Return Address&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;sp&lt;/td&gt;
          &lt;td&gt;x2&lt;/td&gt;
          &lt;td&gt;Stack Pointer&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;gp&lt;/td&gt;
          &lt;td&gt;x3&lt;/td&gt;
          &lt;td&gt;Global Pointer&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;tp&lt;/td&gt;
          &lt;td&gt;x4&lt;/td&gt;
          &lt;td&gt;Thread Pointer&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;t0-t2&lt;/td&gt;
          &lt;td&gt;x5-x7&lt;/td&gt;
          &lt;td&gt;Temporary Registers&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;s0/fp&lt;/td&gt;
          &lt;td&gt;x8&lt;/td&gt;
          &lt;td&gt;Saved Register/Frame Pointer&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;s1&lt;/td&gt;
          &lt;td&gt;x9&lt;/td&gt;
          &lt;td&gt;Saved Register&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;a0-a1&lt;/td&gt;
          &lt;td&gt;x10-x11&lt;/td&gt;
          &lt;td&gt;Function Arguments/Return Value&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;a2-a7&lt;/td&gt;
          &lt;td&gt;x12-x17&lt;/td&gt;
          &lt;td&gt;Functions Arguments&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;s2-s11&lt;/td&gt;
          &lt;td&gt;x18-x27&lt;/td&gt;
          &lt;td&gt;Saved Registers&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;t3-t6&lt;/td&gt;
          &lt;td&gt;x28-x31&lt;/td&gt;
          &lt;td&gt;Temporary Registers&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;RISC-V features a total of 32 registers, numbered from 0 to 31, each serving a specific purpose. These registers play a crucial role in storing data, addresses, and intermediate results, optimizing the efficiency of program execution.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Assembly Language</title>
      <link>https://24x7fpga.com/riscv_directory/2025_02_14_assembly_language/</link>
      <pubDate>Fri, 14 Feb 2025 15:07:00 -0500</pubDate>
      <guid>https://24x7fpga.com/riscv_directory/2025_02_14_assembly_language/</guid>
      <description>&lt;h2 id=&#34;d41d8c&#34;&gt;&lt;/h2&gt;
&lt;p&gt;Machine language, which consists solely of 1&amp;rsquo;s and 0&amp;rsquo;s, is the language understood by machines. Writing even a simple addition operation in machine language requires extensive effort; therefore, assembly language is used to make programs more readable and understandable for humans. Assembly language is then converted into machine language using a compiler. In this section, basic assembly language operations and the micro-operations required for their execution will be explored.&lt;/p&gt;</description>
    </item>
    <item>
      <title>RISC-V Directory</title>
      <link>https://24x7fpga.com/riscv_directory/2025_02_14_risc_v_directory/</link>
      <pubDate>Fri, 14 Feb 2025 14:45:00 -0500</pubDate>
      <guid>https://24x7fpga.com/riscv_directory/2025_02_14_risc_v_directory/</guid>
      <description>&lt;p&gt;This directory explores the fundamentals of microarchitecture design, with the ultimate goal of developing a RISC-V core for FPGA implementation. Here, you&amp;rsquo;ll find insights into processor design, pipeline architecture, and the steps involved in bringing a custom RISC-V core to life on an FPGA.&lt;/p&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;https://24x7fpga.com/ox-hugo/risc_v.svg&#34;
         alt=&#34;Figure 1: RISC-V Instruction Set&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 1: &lt;!-- raw HTML omitted --&gt;RISC-V Instruction Set&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://www.sciencedirect.com/book/9780128200643/digital-design-and-computer-architecture&#34;&gt;Digital Design and Computer Architecture RISC-V Edition&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;my-workflow&#34;&gt;My Workflow&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ripes.me/&#34;&gt;RISC-V Simulator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;theory&#34;&gt;Theory&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/riscv_directory/2025_02_14_assembly_language/&#34;&gt;Assembly Language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/riscv_directory/2025_02_14_risc_v_register_set/&#34;&gt;RISC-V Register Set&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;instruction-set&#34;&gt;Instruction Set&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/riscv_directory/2025_02_18_r_type/&#34;&gt;R-Type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/riscv_directory/2025_02_19_i_type/&#34;&gt;I-Type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/riscv_directory/2025_02_20_s_type/&#34;&gt;S-Type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/riscv_directory/2025_02_20_b_type/&#34;&gt;B-Type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/riscv_directory/2025_02_20_u_type/&#34;&gt;U-Type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;J-Type&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;single-cycle&#34;&gt;Single Cycle&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Microarchitecture Overview&lt;/li&gt;
&lt;li&gt;Data Path&lt;/li&gt;
&lt;li&gt;Control Path&lt;/li&gt;
&lt;li&gt;Design&lt;/li&gt;
&lt;li&gt;Trade-offs&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Scheduling Semantics</title>
      <link>https://24x7fpga.com/sv_directory/2025_01_14_scheduling_semantics/</link>
      <pubDate>Tue, 14 Jan 2025 17:25:00 -0500</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2025_01_14_scheduling_semantics/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/RTL/tree/master/rtl_designs/race_condition&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;d41d8c&#34;&gt;&lt;/h2&gt;
&lt;p&gt;In digital design, it&amp;rsquo;s crucial to ensure that simulations accurately reflect real-time hardware behavior. Interestingly, there are instances where a design performs flawlessly on hardware but fails during simulation. One common culprit behind such discrepancies is a race condition—an issue that arises due to timing mismatches between design modules and the verification environment. Effectively identifying and resolving race conditions is critical, but it is even more important to strive for and master designs that are inherently free of race conditions.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Random Powers of Two</title>
      <link>https://24x7fpga.com/sv_directory/2025_01_10_random_powers_of_two/</link>
      <pubDate>Fri, 10 Jan 2025 19:30:00 -0500</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2025_01_10_random_powers_of_two/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/SV/tree/main/sv_verification/cstrs_challenges/pwr_two&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_11_12_18_40_22_constraint_challenges/&#34;&gt;Constraint Challenges&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;d41d8c&#34;&gt;&lt;/h2&gt;
&lt;h3 id=&#34;problem-statement&#34;&gt;Problem Statement&lt;/h3&gt;
&lt;p&gt;Write a SystemVerilog constraint to generate random numbers that are powers of two. The generated numbers should only include values such as 2, 4, 8, 16, 32, and so on, up to a specified maximum limit. Ensure the constraint restricts randomization to these valid values only and &lt;strong&gt;do not&lt;/strong&gt; use the multiplication operator.&lt;/p&gt;
&lt;h3 id=&#34;problem-breakdown&#34;&gt;Problem Breakdown&lt;/h3&gt;
&lt;p&gt;Create an array to hold the numbers that are powers of two. Generate a random number that is greater than 1 and less than the specified range. Write a constraint to check if the number is power of two.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cyclic Random Number Without Using Randc</title>
      <link>https://24x7fpga.com/sv_directory/2025_01_10_cyclic_random_number_without_using_randc/</link>
      <pubDate>Fri, 10 Jan 2025 15:45:00 -0500</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2025_01_10_cyclic_random_number_without_using_randc/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/SV/tree/main/sv_verification/cstrs_challenges/rand_wo_randc&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_11_12_18_40_22_constraint_challenges/&#34;&gt;Constraint Challenges&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;d41d8c&#34;&gt;&lt;/h2&gt;
&lt;h3 id=&#34;problem-statement&#34;&gt;Problem Statement&lt;/h3&gt;
&lt;p&gt;Generate a sequence of non-repeating random numbers stored in an array. The solution should ensure that each number appears only once and should cover all possible values in the specified range. &lt;strong&gt;Do not&lt;/strong&gt; use the &lt;code&gt;randc&lt;/code&gt; function in SystemVerilog.&lt;/p&gt;
&lt;h4 id=&#34;randc&#34;&gt;Randc&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Randc&lt;/code&gt; is a built-in command in SystemVerilog designed to generate random variables in a cyclic manner. Unlike standard randomization methods, &lt;code&gt;randc&lt;/code&gt; ensures that all possible values within the specified range are generated exactly once before any value repeats.&lt;/p&gt;</description>
    </item>
    <item>
      <title>D Flip-Flop: Operation</title>
      <link>https://24x7fpga.com/rtl_directory/2024_12_21_d_flip_flop_operation/</link>
      <pubDate>Sat, 21 Dec 2024 17:41:00 -0500</pubDate>
      <guid>https://24x7fpga.com/rtl_directory/2024_12_21_d_flip_flop_operation/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/RTL/tree/master/rtl_designs/d_ff_en&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/rtl_directory/2024_06_05_00_21_53_rtl_design_directory/&#34;&gt;RTL Design Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;d41d8c&#34;&gt;&lt;/h2&gt;
&lt;p&gt;A &lt;strong&gt;flip-flop&lt;/strong&gt;, also known as a register, is a fundamental building block in digital circuits used to store a single bit of data. The stored data remains stable until a new input is latched, triggered by an external clock signal. Depending on the design, the data is captured on either the rising edge or falling edge of the clock, making flip-flops essential for synchronizing data in sequential logic circuits.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Latch and Flip-Flop</title>
      <link>https://24x7fpga.com/rtl_directory/2024_12_21_latch_and_flip_flop/</link>
      <pubDate>Sat, 21 Dec 2024 13:07:00 -0500</pubDate>
      <guid>https://24x7fpga.com/rtl_directory/2024_12_21_latch_and_flip_flop/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/RTL/tree/master/rtl_designs/latch_ff&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/rtl_directory/2024_06_05_00_21_53_rtl_design_directory/&#34;&gt;RTL Design Directory&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Latchs and Flip-Flops are fundamental digital components used to store information. Both play a critical role in sequential circuits, but they differ in their operation and applications.&lt;/p&gt;
&lt;h2 id=&#34;latch&#34;&gt;Latch&lt;/h2&gt;
&lt;p&gt;A &lt;strong&gt;latch&lt;/strong&gt; is level-sensitive memory element that stores a single bit of data. It operates based on the state of an enable signal:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Transparent Mode: When the enable signal is active, the latch allows data to flow through, making it &amp;ldquo;transparent.&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Hold Mode: When the enable signal is inactive, the latch retains its last state, effectively &amp;ldquo;latching&amp;rdquo; the data.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Latches are commonly used in designs where immediate data storage or asynchronous operation is required.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Divide by X</title>
      <link>https://24x7fpga.com/sv_directory/2024_12_14_divide_by_x/</link>
      <pubDate>Sat, 14 Dec 2024 21:47:00 -0500</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_12_14_divide_by_x/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/SV/tree/main/sv_verification/cstrs_challenges/div_by_X&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_11_12_18_40_22_constraint_challenges/&#34;&gt;Constraint Challenges&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;d41d8c&#34;&gt;&lt;/h2&gt;
&lt;h3 id=&#34;problem-statement&#34;&gt;Problem Statement&lt;/h3&gt;
&lt;p&gt;Create a constraint to generate an &lt;code&gt;N-bit&lt;/code&gt; random number that is divisible by a given natural number &lt;code&gt;X&lt;/code&gt;. The value of &lt;code&gt;X&lt;/code&gt; is parameterized, allowing it to be easily changed for different test scenarios.&lt;/p&gt;
&lt;h3 id=&#34;problem-breakdown&#34;&gt;Problem Breakdown&lt;/h3&gt;
&lt;p&gt;The key idea is to ensure that the random number generated satisfies the condition below:&lt;/p&gt;
&lt;p&gt;\begin{equation}
\label{eq.1}
NUM \quad \% \quad X == 0
\end{equation}&lt;/p&gt;</description>
    </item>
    <item>
      <title>Generate Diagonal Zeros/Ones</title>
      <link>https://24x7fpga.com/sv_directory/2024_11_29_21_53_39_generate_diagonal_zeros_ones/</link>
      <pubDate>Fri, 29 Nov 2024 21:53:00 -0500</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_11_29_21_53_39_generate_diagonal_zeros_ones/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/SystemVerilog_Verification/tree/main/sv_verification/cstrs_challenges/diag_zero&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_11_12_18_40_22_constraint_challenges/&#34;&gt;Constraint Challenges&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;d41d8c&#34;&gt;&lt;/h2&gt;
&lt;h3 id=&#34;problem-statement&#34;&gt;Problem Statement&lt;/h3&gt;
&lt;p&gt;Write a constraint to generate an N×N matrix where diagonal elements are set to zeros (or ones), while the rest of the matrix can be filled with either random values or a predefined value.&lt;/p&gt;
&lt;h3 id=&#34;problem-breakdown&#34;&gt;Problem Breakdown&lt;/h3&gt;
&lt;p&gt;To make the solution more manageable, we can decompose the constraint into smaller, focused sub-constraints:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Generate an N×N Matrix: Define a rand array to hold the matrix values.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Valid-Ready Protocol</title>
      <link>https://24x7fpga.com/rtl_directory/2024_11_29_18_17_10_valid_ready_protocol/</link>
      <pubDate>Fri, 29 Nov 2024 18:17:00 -0500</pubDate>
      <guid>https://24x7fpga.com/rtl_directory/2024_11_29_18_17_10_valid_ready_protocol/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/RTL/tree/master/rtl_designs/valid_ready&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/rtl_directory/2024_06_05_00_21_53_rtl_design_directory/&#34;&gt;RTL Design Directory&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;valid-ready&lt;/strong&gt; protocol is a fundamental handshake mechanism in digital design, commonly used in protocols like AXI. It ensures smooth data flow between a producer (the data source) and a consumer (the data sink), enabling reliable and synchronized communication in hardware systems.&lt;/p&gt;
&lt;figure class=&#34;center !important&#34;&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;https://24x7fpga.com/ox-hugo/valid_ready.svg&#34;
         alt=&#34;Figure 1: Valid-Ready Flow Control&#34; width=&#34;600px&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 1: &lt;!-- raw HTML omitted --&gt;Valid-Ready Flow Control&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&#34;guidelines&#34;&gt;Guidelines&lt;/h2&gt;
&lt;p&gt;The valid and ready signals are integral to many handshaking protocols, ensuring reliable data transfer between components in a digital system. Let’s break down their behavior:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Design Process for Constraint Challenges</title>
      <link>https://24x7fpga.com/sv_directory/2024_11_12_19_05_16_design_process_for_constraint_challenges/</link>
      <pubDate>Tue, 12 Nov 2024 19:05:00 -0500</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_11_12_19_05_16_design_process_for_constraint_challenges/</guid>
      <description>&lt;p&gt;In digital design, automation is key to streamlining workflows. I developed a Python script that generates the required &lt;code&gt;.sv&lt;/code&gt; files for simulation. This script automates the process of creating all the necessary files for the design, saving time and reducing manual effort. By automatically generating these simulation files, the script helps standardize and expedite the verification process, ensuring consistency and minimizing the chances of human error.&lt;/p&gt;
&lt;h2 id=&#34;folder-structure&#34;&gt;Folder Structure&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Projects
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── FPGA_Projects
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│   └── SystemVerilog_Verification
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│       ├── Readme.org
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│       ├── sv_tcl_script
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│       ├── sv_templates
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│       └── sv_verification
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│           ├──   ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│           ├── cstrs_challenges
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│           ├──   ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│           └──   ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;│
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;└── Python_Scripts
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    └── sv_scripts
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ├── sv_clean.py
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ├── sv_cstrs_design.py
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ├── sv_cstrs_run.py
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        ├── sv_design.py
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        └── sv_run.py
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The project directory is organized into two main sections: &lt;code&gt;FPGA_Projects&lt;/code&gt; and &lt;code&gt;Python_Scripts&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Constraint Challenges</title>
      <link>https://24x7fpga.com/sv_directory/2024_11_12_18_40_22_constraint_challenges/</link>
      <pubDate>Tue, 12 Nov 2024 18:40:00 -0500</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_11_12_18_40_22_constraint_challenges/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/SystemVerilog_Verification/tree/main/sv_verification/cstrs_challenges&#34;&gt;GitHub&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Constraints in SystemVerilog play a vital role in verification by enabling robust and efficient generation of test scenarios that thoroughly exercise the design under test (DUT). When designing a verification environment, especially for complex digital designs, simply testing with fixed values isn’t sufficient.&lt;/p&gt;
&lt;p&gt;Learning constraints in SystemVerilog is crucial for verification because they enable controlled randomization, helping engineers generate targeted, meaningful test cases while covering a wide range of scenarios. Constraints define rules for random values, guiding the testbench to create valid inputs, edge cases, and corner cases, which leads to higher functional coverage without manually scripting every test.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Adding and Removing Text in mulitple lines in Vim</title>
      <link>https://24x7fpga.com/vim_directory/2024_11_05_15_21_27_adding_and_removing_text_in_mulitple_lines_in_vim/</link>
      <pubDate>Tue, 05 Nov 2024 15:21:00 -0500</pubDate>
      <guid>https://24x7fpga.com/vim_directory/2024_11_05_15_21_27_adding_and_removing_text_in_mulitple_lines_in_vim/</guid>
      <description>&lt;h2 id=&#34;adding-text-at-the-beginning-of-multiple-lines&#34;&gt;Adding Text at the Beginning of Multiple Lines&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Go the line you want to select the text.&lt;/li&gt;
&lt;li&gt;Press &lt;strong&gt;V&lt;/strong&gt; (upppercase &lt;code&gt;V&lt;/code&gt;) to state Visual line mode.&lt;/li&gt;
&lt;li&gt;Select multiple line using arrow or j/k keys.&lt;/li&gt;
&lt;li&gt;Press &lt;code&gt;:&lt;/code&gt; after selecting the desired lines. This will open the line range command &lt;code&gt;:&#39;&amp;lt;,&#39;&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Type &lt;code&gt;s/^/&amp;lt;text&amp;gt;/&lt;/code&gt;, where &amp;ldquo;&amp;lt;text&amp;gt;&amp;rdquo; is the text you want to add at the beginning of each fo the selected lines. &lt;code&gt;(^)&lt;/code&gt; indicates the will be added to the beginning of the line.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;example-1-add-text-to-the-selected-lines&#34;&gt;Example 1: Add text to the selected lines&lt;/h4&gt;
&lt;p&gt;Adding comments &lt;code&gt;//&lt;/code&gt; to each line in verilog.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Constraint: In-line and External</title>
      <link>https://24x7fpga.com/sv_directory/2024_10_22_16_57_37_constraint_in_line_and_external/</link>
      <pubDate>Tue, 22 Oct 2024 16:57:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_10_22_16_57_37_constraint_in_line_and_external/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/SystemVerilog_Verification/blob/main/sv_verification/const_in_ln_extn/tb_const_in_ln_extn.sv&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;in-line-constraint&#34;&gt;In-Line Constraint&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;in-line&lt;/code&gt; constraint allows for applying constraints directly within the &lt;code&gt;randomize()&lt;/code&gt; function call. This makes it easier to define temporary or context-specific constraints without modifying the original constraint block. Additional, &lt;code&gt;with&lt;/code&gt; keyword must be used along with the add-on constraints while calling &lt;code&gt;randomize()&lt;/code&gt; function.&lt;/p&gt;
&lt;h3 id=&#34;syntax&#34;&gt;Syntax&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;handle_name.randomize() with { &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;constraint&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;example-code&#34;&gt;Example Code&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;class const_ex;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   rand &lt;span style=&#34;color:#66d9ef&#34;&gt;bit&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] a;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   constraint const_1 {a inside {[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;]};}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; disp();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a = %d&amp;#34;&lt;/span&gt;, a);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;endfunction&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// disp
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;endclass &lt;span style=&#34;color:#75715e&#34;&gt;// const_ex
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; tb_const_in_ln_extn;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   const_ex in_ln;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;initial&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      in_ln &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; new();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         in_ln.randomize() with {a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;25&lt;/span&gt;; a &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         in_ln.disp();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;endmodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://www.edaplayground.com/x/feM8&#34;&gt;Execute the code in EDA Playground&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Constraint: Weighted Distribution</title>
      <link>https://24x7fpga.com/sv_directory/2024_10_22_14_42_44_constraint_weighted_distribution/</link>
      <pubDate>Tue, 22 Oct 2024 14:42:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_10_22_14_42_44_constraint_weighted_distribution/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/SystemVerilog_Verification/blob/main/sv_verification/const_dist/tb_const_dist.sv&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The weighted distribution constraint is used with the &lt;code&gt;dist&lt;/code&gt; operator to control the probability of specific values being generated during randomization. This is useful when certain values have to appear more or less frequently in a set of random outcomes.&lt;/p&gt;
&lt;h4 id=&#34;syntax&#34;&gt;Syntax&lt;/h4&gt;
&lt;p&gt;The &lt;code&gt;dist&lt;/code&gt; keyword is utilized to generated weighted distribution during randomization.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;constraint &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;constraint_name&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {varible_name dist {&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;};}   &lt;span style=&#34;color:#75715e&#34;&gt;// value := weight
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;constraint &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;constraint_name&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {varible_name dist {&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;, [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;:/&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;};}   &lt;span style=&#34;color:#75715e&#34;&gt;// value :/ weight
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;:=&lt;/code&gt;: This operator specifies that the weight is the same for every value within the specified range.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:/&lt;/code&gt;: This operator ensures that the weight is equally divided among all values in the range.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the above example:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Constraint: Solve-Before</title>
      <link>https://24x7fpga.com/sv_directory/2024_10_22_13_18_19_constraint_solve_before/</link>
      <pubDate>Tue, 22 Oct 2024 13:18:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_10_22_13_18_19_constraint_solve_before/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/SystemVerilog_Verification/blob/main/sv_verification/const_solve_before/tb_const_solve_before.sv&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As the name implies, the &lt;code&gt;solve-before&lt;/code&gt; constraint ensures that the specified constraint is resolved prior to any other constraints during randomization. This feature becomes particularly useful when you need to control the order of constraint solving to achieve specific results or meet dependencies within the randomization process for varible ordering&lt;/p&gt;
&lt;p&gt;In a typical scenario, the constraint solver assigns equal priority to all constraints, meaning that the order in which constraints are resolved is non-deterministic. However, when you require certain variables to be solved in a specific order, the &lt;code&gt;solve-before&lt;/code&gt; constraint gives you finer control by changing the probability of occurrences.This allows you to enforce ordering among variables and manage dependencies effectively, especially in complex verification environments where variable relationships influence the final randomized results.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Constraint: Implication and Equivalence</title>
      <link>https://24x7fpga.com/sv_directory/2024_10_16_13_50_42_constraint_implication_and_equivalence/</link>
      <pubDate>Wed, 16 Oct 2024 13:50:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_10_16_13_50_42_constraint_implication_and_equivalence/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/SystemVerilog_Verification/blob/main/sv_verification/const_imply/tb_const_imply.sv&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;implication-operator&#34;&gt;Implication Operator&lt;/h3&gt;
&lt;p&gt;The implication operator &lt;code&gt;-&amp;gt;&lt;/code&gt; is another form of conditional &lt;code&gt;(if)&lt;/code&gt; constraint. Where the antecedent (condition A) is on left hand side of the &lt;code&gt;-&amp;gt;&lt;/code&gt; and consequent (condition B) is on the right hand side of the &lt;code&gt;-&amp;gt;&lt;/code&gt; operator.&lt;/p&gt;
&lt;h2 id=&#34;d41d8c&#34;&gt;&lt;/h2&gt;
&lt;h4 id=&#34;syntax&#34;&gt;Syntax&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;constraint &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;constrain name&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {A &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; B;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The expression A -&amp;gt; B is equivalent to the expression (!A || B).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If &lt;code&gt;A&lt;/code&gt; is true, then &lt;code&gt;B&lt;/code&gt; must also hold true.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Constraint: Bidirectional and Conditional</title>
      <link>https://24x7fpga.com/sv_directory/2024_10_16_11_12_51_constraint_bidirectional_and_conditional/</link>
      <pubDate>Wed, 16 Oct 2024 11:12:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_10_16_11_12_51_constraint_bidirectional_and_conditional/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/SystemVerilog_Verification/blob/main/sv_verification/const_bidir_cond/tb_const_bidir_cond.sv&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The code inside a &lt;code&gt;constraint&lt;/code&gt; block does not execute sequentially. This allows multiple conditions to be declared within the same block without any specific order and all the conditions will be checked. One key feature of SystemVerilog constraints is their bidirectional nature—the solver evaluates both sides of an expression to satisfy the constraints. Moreover, conditional statements such as &lt;code&gt;if-else&lt;/code&gt; are supported within constraint blocks. These statements enable expressions to become active or inactive based on specific conditions, providing flexibility in complex scenarios.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Constraint: Array Randomization</title>
      <link>https://24x7fpga.com/sv_directory/2024_10_15_17_48_30_constraint_array_randomization/</link>
      <pubDate>Tue, 15 Oct 2024 17:48:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_10_15_17_48_30_constraint_array_randomization/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/SystemVerilog_Verification/blob/main/sv_verification/const_arr_rand/tb_const_arr_rand.sv&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;unique&lt;/code&gt; keyword ensures that variables or elements within an array have unique values. This can be applied to fixed arrays, associative arrays, dynamic arrays, or queues, making it useful for scenarios where duplication of values is not allowed.&lt;/p&gt;
&lt;h4 id=&#34;syntax&#34;&gt;Syntax&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rand &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; arr[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;constraint unique_array {unique {arr};} &lt;span style=&#34;color:#75715e&#34;&gt;// ensure all the array elements are unique
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;d41d8c&#34;&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Note:&lt;/code&gt; Vivado simulator does not support the &lt;code&gt;unique&lt;/code&gt; keyword. Use EDA Playground or other simulator when using the &lt;code&gt;unique&lt;/code&gt; keyword.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Constraint: Inside Operator</title>
      <link>https://24x7fpga.com/sv_directory/2024_10_15_15_54_33_constraint_inside_operator/</link>
      <pubDate>Tue, 15 Oct 2024 15:54:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_10_15_15_54_33_constraint_inside_operator/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/SystemVerilog_Verification/blob/main/sv_verification/const_inside_op/tb_const_inside_op.sv&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;inside&lt;/code&gt; operator lets you create sets of values from which a variable can randomly be selected. By default, all values are chosen with equal probability, unless other constraints are applied. You can also include variables in these sets to make the randomization more dynamic.&lt;/p&gt;
&lt;h4 id=&#34;syntax&#34;&gt;Syntax&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rand &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; rn;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;constraint set_value {rn inside {&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;};}   &lt;span style=&#34;color:#75715e&#34;&gt;// randomly selects from set of values
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;constraint set_value {rn inside {&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;};}     &lt;span style=&#34;color:#75715e&#34;&gt;// randomly selects values from 10 to 20
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;constraint set_value {&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(rn inside {&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;});}  &lt;span style=&#34;color:#75715e&#34;&gt;// randomly selects values outside of the range 10 to 20
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;d41d8c&#34;&gt;&lt;/h2&gt;
&lt;h4 id=&#34;example-code&#34;&gt;Example Code&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;class inside_op;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   rand &lt;span style=&#34;color:#66d9ef&#34;&gt;bit&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] a;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   rand &lt;span style=&#34;color:#66d9ef&#34;&gt;bit&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] b;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   rand &lt;span style=&#34;color:#66d9ef&#34;&gt;bit&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] c;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   constraint const_a {a inside {&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;};}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   constraint const_b {b inside {[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;]};}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   constraint const_c {&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(c inside {[&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;]});}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; disp();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a = %0d, b = %0d, c = %0d&amp;#34;&lt;/span&gt;, a, b, c);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;endfunction&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// disp
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;endclass &lt;span style=&#34;color:#75715e&#34;&gt;// inside_op
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; tb_const_inside_op;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   inside_op i_op;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;initial&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      i_op &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; new();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         assert(i_op.randomize())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;           &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         $error(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Randomization Failed ;(&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         i_op.disp();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;endmodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Constraint Randomization</title>
      <link>https://24x7fpga.com/sv_directory/2024_10_15_12_53_31_constraint_randomization/</link>
      <pubDate>Tue, 15 Oct 2024 12:53:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_10_15_12_53_31_constraint_randomization/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In SystemVerilog, &lt;code&gt;constraints&lt;/code&gt; are expressions that must be satisfied by the constraint solver during randomization. These constraints guide the solver to generate valid random values that meet the desired conditions.&lt;/p&gt;
&lt;h4 id=&#34;syntax&#34;&gt;Syntax&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;constraint &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;constraint_name&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {condition &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;; condition &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;; .... condition N}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;d41d8c&#34;&gt;&lt;/h2&gt;
&lt;p&gt;Constraints in SystemVerilog only support 2-state values (no X or Z) and work bidirectionally, meaning the value of one variable can influence others. The solver must find a solution if possible, handling complex equations and expressions with integral types (like bit, logic, integer, or enum), unless the constraints are unsolvable.&lt;/p&gt;</description>
    </item>
    <item>
      <title>rand and randc</title>
      <link>https://24x7fpga.com/sv_directory/2024_10_15_12_34_46_rand_and_randc/</link>
      <pubDate>Tue, 15 Oct 2024 12:34:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_10_15_12_34_46_rand_and_randc/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/SystemVerilog_Verification/blob/main/sv_verification/rand_randc/tb_rand_randc.sv&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;rand&lt;/code&gt; and &lt;code&gt;randc&lt;/code&gt; keywords are used to randomize class objects.&lt;/p&gt;
&lt;h2 id=&#34;rand&#34;&gt;rand&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Calling &lt;code&gt;rand&lt;/code&gt; method provides uniformly distributed values.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rand &lt;span style=&#34;color:#66d9ef&#34;&gt;bit&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] a;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;randc&#34;&gt;randc&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;randc&lt;/code&gt; method generates random values in a cyclic manner, ensuring that all possible values are used before any value repeats.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;randc &lt;span style=&#34;color:#66d9ef&#34;&gt;bit&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] b;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>$urandom and $urandom_range</title>
      <link>https://24x7fpga.com/sv_directory/2024_10_15_12_10_22_urandom_and_urandom_range/</link>
      <pubDate>Tue, 15 Oct 2024 12:10:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_10_15_12_10_22_urandom_and_urandom_range/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In SystemVerilog, &lt;code&gt;$urandom&lt;/code&gt; and &lt;code&gt;$urandom_range&lt;/code&gt; are system functions used to generate pseudo-random integers. It’s especially useful in testbenches and verification environments where randomization is essential to stimulate various input scenarios for DUT (Design Under Test).&lt;/p&gt;
&lt;h2 id=&#34;urandom&#34;&gt;$urandom&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Returns a 32-bit unsigned random number each time it is called.&lt;/li&gt;
&lt;li&gt;It uses a seed to initialize the random number generator, and each call to &lt;code&gt;$urandom&lt;/code&gt; produces a different value based on this seed.&lt;/li&gt;
&lt;li&gt;If you use the same seed, the random numbers will follow the same sequence, which is useful for debugging. Without explicit seeding, &lt;code&gt;$urandom&lt;/code&gt; uses an automatic seed.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; rn;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $urandom;       &lt;span style=&#34;color:#75715e&#34;&gt;// automatic seed
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;rn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $urandom(&lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;);   &lt;span style=&#34;color:#75715e&#34;&gt;// seed with a specific values
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;rn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $urandom &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;// random value between 0 and 9
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;urandom-range&#34;&gt;$urandom_range&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The function &lt;code&gt;$urandom_range(min,max)&lt;/code&gt; returns an unsigned integer within the specified range (min, max).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; rn;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rn &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $urandom(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;); &lt;span style=&#34;color:#75715e&#34;&gt;// generates random values between 10 and 20
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;points-to-remember&#34;&gt;Points to Remember&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Both &lt;code&gt;$urandom&lt;/code&gt; and &lt;code&gt;$urandom_range&lt;/code&gt; functions generate only 32-bit integers.&lt;/li&gt;
&lt;li&gt;To create a random value larger than 32 bits, you can concatenate two 32-bit random numbers.&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    <item>
      <title>  Difference between &#34;==&#34; and &#34;===&#34;
  </title>
      <link>https://24x7fpga.com/rtl_directory/2024_10_07_00_08_52_difference_between_and/</link>
      <pubDate>Mon, 07 Oct 2024 00:08:00 -0400</pubDate>
      <guid>https://24x7fpga.com/rtl_directory/2024_10_07_00_08_52_difference_between_and/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/RTL/tree/master/rtl_designs/equals&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/rtl_directory/2024_06_05_00_21_53_rtl_design_directory/&#34;&gt;RTL Design Directory&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In Verilog, &lt;strong&gt;==&lt;/strong&gt; and &lt;strong&gt;===&lt;/strong&gt; are both used for comparison, but they behave differently in how they handle X (unknown).&lt;/p&gt;
&lt;h2 id=&#34;equality&#34;&gt;== Equality&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;==&lt;/strong&gt; operator checks if two values are logically equal. It used for comparisons on only 1&amp;rsquo;s and 0&amp;rsquo;s. If any operand contains an X, the comparison result will be a unknown value.&lt;/p&gt;
&lt;h3 id=&#34;example&#34;&gt;Example:&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&amp;#39;b101&lt;/span&gt;X &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&amp;#39;b1011&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;// Result: x (unknown)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&amp;#39;b1&lt;/span&gt;X00 &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;&amp;#39;b1100&lt;/span&gt;;  &lt;span style=&#34;color:#75715e&#34;&gt;// Result: x (unknown)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;equality&#34;&gt;=== Equality&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;===&lt;/strong&gt; operator is a strict equality check. It treats X as don&amp;rsquo;t-care values. When both RHS and LHS are X&amp;rsquo;s the results will true (high).&lt;/p&gt;</description>
    </item>
    <item>
      <title>UVM Resource and Configuration Database</title>
      <link>https://24x7fpga.com/uvm_directory/2024_10_06_11_18_25_uvm_resource_and_configuration_database/</link>
      <pubDate>Sun, 06 Oct 2024 11:18:00 -0400</pubDate>
      <guid>https://24x7fpga.com/uvm_directory/2024_10_06_11_18_25_uvm_resource_and_configuration_database/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/UVM/blob/main/uvm_verification/config_db/tb_config_db.sv&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/uvm_directory/2024_08_28_12_39_50_uvm_framework_directory/&#34;&gt;UVM Framework Directory&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Data can be shared across the an UVM testbench using two key mechanisms: the configuration database and the resources database. While both serve the purpose of sharing data between components, they are used in distinct contexts. The configuration database is typically used for setting up component-specific configurations, while the resources database is a more general-purpose tool for sharing any kind of data across the testbench.&lt;/p&gt;
&lt;h2 id=&#34;resource-database&#34;&gt;Resource Database&lt;/h2&gt;
&lt;p&gt;The resources database in UVM is a parameterized container used to store arbitrary data in a global or hierarchical manner. It can hold any type of data, constrained only by the data types available in SystemVerilog. Each resource item can be retrieved either by its name or by its type. Additionally, multiple resources with the same name or type can exist in the database. The resources are stored in two associative arrays, one with the name as the key and the other with the type as the key, both organized in the form of a queue. Resources are added to the resource pool by the &lt;code&gt;set&lt;/code&gt; method and retrieved by calling &lt;code&gt;get_by_name&lt;/code&gt; or &lt;code&gt;get_by_type&lt;/code&gt;. When multiple resources share the same name or type, the one that was added first in the queue takes precedence, following a First In, First Out (FIFO) approach. The &lt;code&gt;uvm_resource_db&lt;/code&gt; class provides a convenience interface for the resource facility.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SV Testbench Overview</title>
      <link>https://24x7fpga.com/sv_directory/2024_10_05_21_56_25_sv_testbench_overview/</link>
      <pubDate>Sat, 05 Oct 2024 21:56:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_10_05_21_56_25_sv_testbench_overview/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/SystemVerilog_Verification/tree/main/sv_verification/half_adder&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A layered testbench is a modular verification environment where the components are divided into specific layers, with each layer responsible for a distinct task. This structured approach ensures better organization, reusability, and scalability, making it easier to manage complex verification environments. The typical components of a SystemVerilog testbench are illustrated in Figure 1.&lt;/p&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;https://24x7fpga.com/ox-hugo/sv_testbench_overview.svg&#34;
         alt=&#34;Figure 1: Testbench Environment&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 1: &lt;!-- raw HTML omitted --&gt;Testbench Environment&lt;/p&gt;</description>
    </item>
    <item>
      <title>SV Verification Workflow in Vivado</title>
      <link>https://24x7fpga.com/sv_directory/2024_10_05_18_24_35_sv_verification_workflow_in_vivado/</link>
      <pubDate>Sat, 05 Oct 2024 18:24:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_10_05_18_24_35_sv_verification_workflow_in_vivado/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/SystemVerilog_Verification&#34;&gt;SystemVerilog&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://github.com/24x7fpga/SystemVerilog_Verification/blob/main/sv_tcl_script/sv_run.tcl&#34;&gt;SV Vivado Script&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://github.com/24x7fpga/PythonScripts/tree/master/sv_scripts&#34;&gt;SV Python Script&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;SystemVerilog was introduced to simplify the verification process by incorporating software features like Object-Oriented Programming (OOP). It significantly enhances testbench development, making the verification of complex designs more manageable. For those looking to experiment with different tools, &lt;a href=&#34;https://www.edaplayground.com/&#34;&gt;EDA Playground&lt;/a&gt; offers a convenient platform to perform verification using a variety of commercial simulators, such as Cadence Xcelium, Synopsys VCS, and Aldec Riviera-PRO.&lt;/p&gt;
&lt;p&gt;In my own workflow, I prefer using Vivado Simulator, as it integrates seamlessly with my design flow. Vivado installation guide can be found &lt;a href=&#34;https://24x7fpga.com/rtl_directory/2024_07_28_10_50_56_vivado_installation/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>UVM Phases</title>
      <link>https://24x7fpga.com/uvm_directory/2024_09_26_13_20_13_uvm_phases/</link>
      <pubDate>Thu, 26 Sep 2024 13:20:00 -0400</pubDate>
      <guid>https://24x7fpga.com/uvm_directory/2024_09_26_13_20_13_uvm_phases/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://24x7fpga.com/uvm_directory/2024_08_28_12_39_50_uvm_framework_directory/&#34;&gt;UVM Framework Directory&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In UVM, a structured mechanism called UVM phases is used to automate the execution of various components within a testbench. This ensures that the simulation follows a defined sequence, streamlining the process. UVM defines twelve key phases, each with a specific role in the testbench lifecycle. The order of execution for these phases is depicted in Figure 1 below.&lt;/p&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;https://24x7fpga.com/ox-hugo/uvm_phases.svg&#34;
         alt=&#34;Figure 1: UVM Phases&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 1: &lt;!-- raw HTML omitted --&gt;UVM Phases&lt;/p&gt;</description>
    </item>
    <item>
      <title>UVM Common Operations</title>
      <link>https://24x7fpga.com/uvm_directory/2024_09_25_14_36_39_uvm_common_operations/</link>
      <pubDate>Wed, 25 Sep 2024 14:36:00 -0400</pubDate>
      <guid>https://24x7fpga.com/uvm_directory/2024_09_25_14_36_39_uvm_common_operations/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/UVM/blob/main/uvm_verification/cmn_op/tb_cmn_op.sv&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/uvm_directory/2024_08_28_12_39_50_uvm_framework_directory/&#34;&gt;UVM Framework Directory&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;uvm_object&lt;/code&gt; provides a set of predefined methods for common operations.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;UVM Method&lt;/th&gt;
          &lt;th&gt;Virtual Method&lt;/th&gt;
          &lt;th&gt;Description&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;copy&lt;/td&gt;
          &lt;td&gt;do_copy&lt;/td&gt;
          &lt;td&gt;Performs a deep copy of an object&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;clone&lt;/td&gt;
          &lt;td&gt;do_copy&lt;/td&gt;
          &lt;td&gt;creates a new object and performs a deep copy of the object&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;compare&lt;/td&gt;
          &lt;td&gt;do_compare&lt;/td&gt;
          &lt;td&gt;Compares one object  to another of the same dat type&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;print&lt;/td&gt;
          &lt;td&gt;do_print&lt;/td&gt;
          &lt;td&gt;Prints the result of convert2string to the terminal&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;sprint&lt;/td&gt;
          &lt;td&gt;do_print&lt;/td&gt;
          &lt;td&gt;Returns the result fo the convert2string&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;convert2string&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
          &lt;td&gt;Returns a string representation of the object&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;copy&#34;&gt;copy&lt;/h2&gt;
&lt;p&gt;This makes deep copy of a specified object. The copy method is &lt;code&gt;not virtual&lt;/code&gt; and should &lt;code&gt;not be overloaded (override)&lt;/code&gt; in derived classes. This design choice is made to maintain consistent copying behaviour among all the objects.&lt;/p&gt;</description>
    </item>
    <item>
      <title>UVM Report Object</title>
      <link>https://24x7fpga.com/uvm_directory/2024_09_23_11_00_17_uvm_report_object/</link>
      <pubDate>Mon, 23 Sep 2024 11:00:00 -0400</pubDate>
      <guid>https://24x7fpga.com/uvm_directory/2024_09_23_11_00_17_uvm_report_object/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/UVM/blob/main/uvm_verification/report_object/tb_report_object.sv&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/uvm_directory/2024_08_28_12_39_50_uvm_framework_directory/&#34;&gt;UVM Framework Directory&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;uvm_report_object&lt;/code&gt; provides an interface to the UVM reporting facility. UVM reporting plays a crucial role in tracking the progress of the testbench, identifying issues, and debugging. It provies a rich set fo message display commands and methods to track and report erros, warnings and information.&lt;/p&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;https://24x7fpga.com/ox-hugo/reporting_classes.svg&#34;
         alt=&#34;Figure 1: UVM Reporting Classes&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 1: &lt;!-- raw HTML omitted --&gt;UVM Reporting Classes&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The methods in uvm_report_object are delegated to the &lt;code&gt;uvm_report_handler&lt;/code&gt;, which manages reporting configurations such as actions, verbosity, and other settings. The report handler decides whether a message should be displayed based on these configurations. If the message is to be displayed, the report handler passes it to a central &lt;code&gt;uvm_report_server&lt;/code&gt; for formatting and output. The uvm_report_server is a global server that processes and displays all reports generated by the uvm_report_handler, ensuring consistent message handling across the UVM environment.&lt;/p&gt;</description>
    </item>
    <item>
      <title>UVM Base Class Library</title>
      <link>https://24x7fpga.com/uvm_directory/2024_09_22_09_38_07_uvm_base_class_library/</link>
      <pubDate>Sun, 22 Sep 2024 09:38:00 -0400</pubDate>
      <guid>https://24x7fpga.com/uvm_directory/2024_09_22_09_38_07_uvm_base_class_library/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://24x7fpga.com/uvm_directory/2024_08_28_12_39_50_uvm_framework_directory/&#34;&gt;UVM Framework Directory&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The base class library in UVM serve as the building blocks for any testbench and verification environment. These classes provide reusable, modular components that help create a structured and scalable framework, ensuring efficiency and consistency across various test environments.&lt;/p&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;https://24x7fpga.com/ox-hugo/uvm_base_class.svg&#34;
         alt=&#34;Figure 1: UVM Base Class&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 1: &lt;!-- raw HTML omitted --&gt;UVM Base Class&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The UVM class library offers a wide range of built-in features for verification, including printing, copying, test phases, and more. Each component in the testbench architecture can be derived from the corresponding UVM class, which enhances readability and reduces development time, making the verification process more efficient and streamlined.&lt;/p&gt;</description>
    </item>
    <item>
      <title>UVM Testbench Overview</title>
      <link>https://24x7fpga.com/uvm_directory/2024_09_22_08_54_25_uvm_testbench_overview/</link>
      <pubDate>Sun, 22 Sep 2024 08:54:00 -0400</pubDate>
      <guid>https://24x7fpga.com/uvm_directory/2024_09_22_08_54_25_uvm_testbench_overview/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://24x7fpga.com/uvm_directory/2024_08_28_12_39_50_uvm_framework_directory/&#34;&gt;UVM Framework Directory&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The UVM testbench follows a layered architecture, where each component is dedicated to a specific task and interacts with the rest of the testbench through well-defined interfaces. This design promotes modularity and reusability, making it easier to manage and extend the testbench. Figure 1 illustrates a typical UVM testbench architecture.&lt;/p&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;https://24x7fpga.com/ox-hugo/uvm_tb_overview.svg&#34;
         alt=&#34;Figure 1: UVM Testbench Architecture&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 1: &lt;!-- raw HTML omitted --&gt;UVM Testbench Architecture&lt;/p&gt;</description>
    </item>
    <item>
      <title>SPI</title>
      <link>https://24x7fpga.com/rtl_directory/2024_09_18_22_25_40_spi/</link>
      <pubDate>Wed, 18 Sep 2024 22:25:00 -0400</pubDate>
      <guid>https://24x7fpga.com/rtl_directory/2024_09_18_22_25_40_spi/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/RTL/tree/master/rtl_designs/spi&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/rtl_directory/2024_06_05_00_21_53_rtl_design_directory/&#34;&gt;RTL Design Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;spi-overview&#34;&gt;SPI: Overview&lt;/h2&gt;
&lt;p&gt;The Serial Peripheral Interface (SPI) is a widely used communication protocol that enables microcontrollers to interact with external peripherals such as OLED displays, sensors, and SD cards. Known for its simplicity SPI facilitates efficient data exchange between devices in embedded systems.&lt;/p&gt;
&lt;p&gt;SPI and &lt;a href=&#34;https://24x7fpga.com/rtl_directory/2024_09_17_20_46_04_uart/&#34;&gt;UART&lt;/a&gt; are both serial communication protocols used to exchange data between peripheral devices, but they differ significantly in how they achieve synchronization. SPI is a synchronous protocol, meaning it relies on a shared clock signal to synchronize data transfer between the transmitter and receiver, ensuring precise timing. In contrast, UART is asynchronous, operating without a clock signal and instead relying on predefined transmission speeds and additional start and stop bits to maintain synchronization. This fundamental difference makes SPI more efficient for high-speed data transfer, while UART is simpler but more prone to timing mismatches and overhead.&lt;/p&gt;</description>
    </item>
    <item>
      <title>UART</title>
      <link>https://24x7fpga.com/rtl_directory/2024_09_17_20_46_04_uart/</link>
      <pubDate>Tue, 17 Sep 2024 20:46:00 -0400</pubDate>
      <guid>https://24x7fpga.com/rtl_directory/2024_09_17_20_46_04_uart/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/RTL/tree/master/rtl_designs/uart&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/rtl_directory/2024_06_05_00_21_53_rtl_design_directory/&#34;&gt;RTL Design Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;uart-overview&#34;&gt;UART: Overview&lt;/h2&gt;
&lt;p&gt;UART, or Universal Asynchronous Receiver/Transmitter, is a widely used protocol for data communication over long distances due to its simplicity and low cost. It facilitates communication by transmitting data sequentially over a single line, making it ideal for scenarios where minimal wiring is preferred.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Transmitter: Converts parallel data into a serial stream for transmission over a single communication line.&lt;/li&gt;
&lt;li&gt;Receiver: Converts the incoming serial data back into parallel form for further processing.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The asynchronous nature of UART means that there is no shared clock signal between the transmitter and receiver. Instead, both sides must agree on the baud rate (data transmission speed) beforehand to ensure accurate communication. This simplicity makes UART popular in microcontrollers, sensors, and other embedded systems.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Clock Gating</title>
      <link>https://24x7fpga.com/rtl_directory/2024_09_13_12_36_11_clock_gating/</link>
      <pubDate>Fri, 13 Sep 2024 12:36:00 -0400</pubDate>
      <guid>https://24x7fpga.com/rtl_directory/2024_09_13_12_36_11_clock_gating/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/RTL/tree/master/rtl_designs/clk_gating&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/rtl_directory/2024_06_05_00_21_53_rtl_design_directory/&#34;&gt;RTL Design Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;clock-gating&#34;&gt;Clock Gating&lt;/h2&gt;
&lt;p&gt;Clock gating is a widely used technique to reduce dynamic power consumption in digital circuits, particularly in complex systems like processors and FPGAs. Before diving into the benefits of clock gating, let’s take a look at the following SystemVerilog code snippet:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;always_ff&lt;/span&gt;@(&lt;span style=&#34;color:#66d9ef&#34;&gt;posedge&lt;/span&gt; clk)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(en)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     Dout &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; Din;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The gate-level diagram of this code is illustrated in Figure 1. In this design, a multiplexer (MUX) controls the data flow, ensuring that when the &amp;lsquo;En&amp;rsquo; signal is high, &amp;lsquo;Din&amp;rsquo; is passed to &amp;lsquo;Dout&amp;rsquo; on the next clock edge. However, this MUX can be replaced with an AND gate to describe the conditional effect more efficiently.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Asynchronous FIFO</title>
      <link>https://24x7fpga.com/rtl_directory/2024_09_07_10_52_50_asynchronous_fifo/</link>
      <pubDate>Sat, 07 Sep 2024 10:52:00 -0400</pubDate>
      <guid>https://24x7fpga.com/rtl_directory/2024_09_07_10_52_50_asynchronous_fifo/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/RTL/tree/master/rtl_designs/fifo_asyn&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/rtl_directory/2024_06_05_00_21_53_rtl_design_directory/&#34;&gt;RTL Design Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;asynchronous-fifo&#34;&gt;Asynchronous FIFO&lt;/h2&gt;
&lt;p&gt;An Asynchronous FIFO is a type of buffer where the write and read operations are controlled by different or unsynchronized clock signals. This makes it ideal for digital systems where data is transferred between components running at different speeds, such as when data is transmitted from a peripheral device to a CPU operating at a different clock frequency than that of the peripheral.&lt;/p&gt;
&lt;p&gt;The primary role of the asynchronous FIFO is to ensure smooth data flow between these distinct clock domains, preventing data loss during transmission. By temporarily storing data in the buffer, the asynchronous FIFO allows the system to handle varying clock speeds without missing any critical data.&lt;/p&gt;</description>
    </item>
    <item>
      <title>UVM Workflow in Vivado</title>
      <link>https://24x7fpga.com/uvm_directory/2024_09_04_14_44_52_uvm_workflow_in_vivado/</link>
      <pubDate>Wed, 04 Sep 2024 14:44:00 -0400</pubDate>
      <guid>https://24x7fpga.com/uvm_directory/2024_09_04_14_44_52_uvm_workflow_in_vivado/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/UVM&#34;&gt;UVM&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://github.com/24x7fpga/UVM/blob/main/uvm_tcl_script/uvm_run.tcl&#34;&gt;UVM Vivado Script&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://github.com/24x7fpga/PythonScripts/blob/master/uvm_scripts/uvm_run.py&#34;&gt;UVM Python Script&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The UVM (Universal Verification Methodology) workflow is centered around creating a testbench that integrates key UVM components such as drivers, monitors, and scoreboards, alongside the essential UVM library setup. Numerous commercial tools are available for simulating and verifying digital designs, including ModelSim, Cadence Xcelium, Synopsys VCS, Aldec Riviera-PRO, and Vivado Simulator. Another excellent option for experimenting with small-to-medium-sized verification projects is &lt;a href=&#34;https://www.edaplayground.com/&#34;&gt;EDA Playground&lt;/a&gt;. EDA Playground offers the advantage of requiring no installation and provides access to multiple simulators for the design. Personally, I opted to use Vivado Simulator for the UVM verification process, as it seamlessly integrates into my existing workflow.&lt;/p&gt;</description>
    </item>
    <item>
      <title>UVM Framework Directory</title>
      <link>https://24x7fpga.com/uvm_directory/2024_08_28_12_39_50_uvm_framework_directory/</link>
      <pubDate>Wed, 28 Aug 2024 12:39:00 -0400</pubDate>
      <guid>https://24x7fpga.com/uvm_directory/2024_08_28_12_39_50_uvm_framework_directory/</guid>
      <description>&lt;p&gt;UVM stands for Universal Verification Method developed by &lt;a href=&#34;https://www.accellera.org/activities/working-groups/uvm&#34;&gt;UVM Working Group&lt;/a&gt; that provides a standardized methodology for verifying digital integrated circuits. UVM is built on top of SystemVerilog and provides a useful &lt;a href=&#34;https://en.wikipedia.org/wiki/Framework&#34;&gt;framework&lt;/a&gt; for creating reusable and scalable testbenchs. The framework provides a set of building blocks or pre-built design kits that help to create a complex system in a more organized and efficient way instead of building everything from scratch. The verification method uses a &lt;a href=&#34;https://en.wikipedia.org/wiki/Factory_(object-oriented_programming)&#34;&gt;factory&lt;/a&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Factory_method_pattern&#34;&gt;method&lt;/a&gt; to create an object instead of using a direct constructor call to create an object. This method allows the code to instantiate a specific class at runtime. This directory contains examples specifically focused on UVM verification design.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Synchronous FIFO</title>
      <link>https://24x7fpga.com/rtl_directory/2024_08_22_14_57_15_synchronous_fifo/</link>
      <pubDate>Thu, 22 Aug 2024 14:57:00 -0400</pubDate>
      <guid>https://24x7fpga.com/rtl_directory/2024_08_22_14_57_15_synchronous_fifo/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/RTL/tree/master/rtl_designs/fifo_buffer_syn&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/rtl_directory/2024_06_05_00_21_53_rtl_design_directory/&#34;&gt;RTL Design Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;synchronous-fifo&#34;&gt;Synchronous FIFO&lt;/h2&gt;
&lt;p&gt;A FIFO (First-In-First-Out) is a storage buffer that is widely used in digital systems where the data that is stored in the memory is retrieved first, hence the name FIFO.&lt;/p&gt;
&lt;p&gt;A synchronous FIFO is a type of FIFO where the write and read operations are synchronized with the same clock signal.&lt;/p&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;https://24x7fpga.com/ox-hugo/fifo.svg&#34;
         alt=&#34;Figure 1: FIFO Buffer&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 1: &lt;!-- raw HTML omitted --&gt;FIFO Buffer&lt;/p&gt;</description>
    </item>
    <item>
      <title>Clocking Block</title>
      <link>https://24x7fpga.com/sv_directory/2024_08_08_13_51_50_clocking_block/</link>
      <pubDate>Thu, 08 Aug 2024 13:51:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_08_08_13_51_50_clocking_block/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;clocking-block&#34;&gt;Clocking Block&lt;/h2&gt;
&lt;p&gt;Clocking block in a testbench is implemented to manage timing relationship and synchronization for a group signals. t provides a clear and organized way to define the clocking events, control the sampling and driving of signals, and synchronize operation.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Groups signals under a common clock, specifying how and when signals are sampeld and driven with respect the clock.&lt;/li&gt;
&lt;li&gt;Provide specification to model clock skew for input and output.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;input-and-output-skew&#34;&gt;Input and Output Skew&lt;/h3&gt;
&lt;p&gt;Idealy, clock skew refers to the variation in arrival times of a clock signal at different components within a system. In SystemVerilog, clock skew can be modeled by specifying an integer value before the signal name within a clocking block. Figure 1 illustrates the specification of input and output skew in SystemVerilog testbenches.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Interface</title>
      <link>https://24x7fpga.com/sv_directory/2024_08_08_10_27_00_interface/</link>
      <pubDate>Thu, 08 Aug 2024 10:27:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_08_08_10_27_00_interface/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;interface&#34;&gt;Interface&lt;/h2&gt;
&lt;p&gt;Interface in SystemVerilog is a construct that bundles all the signals together or group related to signals so that they can be shared among multiple modules in the verification environment. This simplifies the connection between modules, improves code readability, and reduces the likelihood of errors in complex designs.&lt;/p&gt;
&lt;h4 id=&#34;syntax&#34;&gt;Syntax&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// create interface
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;interface interface_name;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   signals;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;endinterface
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// intantiate interface in a module
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;inteface_name inst_name;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;example-code&#34;&gt;Example Code&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Design&lt;/p&gt;</description>
    </item>
    <item>
      <title>Modport</title>
      <link>https://24x7fpga.com/sv_directory/2024_08_08_10_17_52_modport/</link>
      <pubDate>Thu, 08 Aug 2024 10:17:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_08_08_10_17_52_modport/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;modport&#34;&gt;Modport&lt;/h2&gt;
&lt;p&gt;The modport construct within an interface module is used to group signals and specify their directionality. By assigning port directions, modport enforces access control, restricting signals to specific roles and clearly defining their intended function within the interface.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;modport&lt;/strong&gt; keyword is employed to establish these signal definitions within an interface.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Modport provides input, output, inout and ref as port declarations.&lt;/li&gt;
&lt;li&gt;Signals that are &lt;strong&gt;driven&lt;/strong&gt; should be declared as &lt;strong&gt;outputs&lt;/strong&gt; in the modport module.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;example-code&#34;&gt;Example Code&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Design&lt;/p&gt;</description>
    </item>
    <item>
      <title>RFSoC Loop Back Tutorial</title>
      <link>https://24x7fpga.com/rfsoc_directory/2024_08_07_22_15_09_rfsoc_loop_back_tutorial/</link>
      <pubDate>Wed, 07 Aug 2024 22:15:00 -0400</pubDate>
      <guid>https://24x7fpga.com/rfsoc_directory/2024_08_07_22_15_09_rfsoc_loop_back_tutorial/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://24x7fpga.com/rfsoc_directory/2024_08_07_22_09_59_rfsoc/&#34;&gt;RFSoC&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;rfsoc-loop-back-tutorial&#34;&gt;RFSoC Loop Back Tutorial&lt;/h2&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;https://24x7fpga.com/ox-hugo/1275.jpg&#34;
         alt=&#34;Figure 1: Zynq UltraScale&amp;#43; RFSoC 1275 Characterization Kit&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 1: &lt;!-- raw HTML omitted --&gt;Zynq UltraScale+ RFSoC 1275 Characterization Kit&lt;/p&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;rf-data-converter-ip&#34;&gt;RF Data Converter IP&lt;/h3&gt;
&lt;p&gt;Each RFSoC  offers multiple RF-ADCs and RF-DACs which are high precision, high speed, and power efficient. Xilinx Vivado is equipped with RF Data Converter IP core which provides a configurable wrapper that allows these RF-ADCs and RF-DACs blocks to be used in the IP integrator designs. The RF-ADCs and RF-DACs are organized into tiles where each tiles contains one, two or four RF-ADCs and RF-DACs. For Zynq UltraScale+ RFSoC 1275 characterization board each tile contains two RF-ADCs and RF-DACs. User can manually alter the power efficient digital down converters (DDCs) and digital up converters (DUCs) that include programmable interpolation and decimation rates. Each tile includes a block with a PLL and all the necessary clock handling logic.&lt;/p&gt;</description>
    </item>
    <item>
      <title>RFSoC</title>
      <link>https://24x7fpga.com/rfsoc_directory/2024_08_07_22_09_59_rfsoc/</link>
      <pubDate>Wed, 07 Aug 2024 22:09:00 -0400</pubDate>
      <guid>https://24x7fpga.com/rfsoc_directory/2024_08_07_22_09_59_rfsoc/</guid>
      <description>&lt;h2 id=&#34;rfsoc&#34;&gt;RFSoC&lt;/h2&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;https://24x7fpga.com/ox-hugo/zcu1275-top.png&#34;/&gt; 
&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/rfsoc_directory/2024_08_07_22_15_09_rfsoc_loop_back_tutorial/&#34;&gt;RFSoC Loop Back Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;RFSoC External Clock and Data&lt;/li&gt;
&lt;li&gt;RFSoC MTS Tutorial&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Semaphore</title>
      <link>https://24x7fpga.com/sv_directory/2024_08_06_12_53_53_semaphore/</link>
      <pubDate>Tue, 06 Aug 2024 12:53:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_08_06_12_53_53_semaphore/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Interprocess communication is a way to communicate between different processes and testbench components. There are three mechanisms:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_31_17_20_12_events/&#34;&gt;Events&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_08_06_10_48_02_mailbox/&#34;&gt;Mailbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_08_06_12_53_53_semaphore/&#34;&gt;Semaphore&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;semaphore&#34;&gt;Semaphore&lt;/h2&gt;
&lt;p&gt;A semaphore in SystemVerilog is a &lt;strong&gt;built-in&lt;/strong&gt; class used for synchronization. It acts as a container holding a fixed number of keys, which regulate access to shared memory resources. Semaphores are specifically designed to manage and control concurrent access, ensuring that multiple processes can safely interact with shared resources without conflicts.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mailbox</title>
      <link>https://24x7fpga.com/sv_directory/2024_08_06_10_48_02_mailbox/</link>
      <pubDate>Tue, 06 Aug 2024 10:48:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_08_06_10_48_02_mailbox/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Interprocess communication is a way to communicate between different processes and testbench components. There are three mechanisms:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_31_17_20_12_events/&#34;&gt;Events&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_08_06_10_48_02_mailbox/&#34;&gt;Mailbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_08_06_12_53_53_semaphore/&#34;&gt;Semaphore&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;mailbox&#34;&gt;Mailbox&lt;/h2&gt;
&lt;p&gt;A mailbox serves as a synchronization primitive utilized for exchanging data between processes within a testbench. This data, referred to as a message, is managed through the mailbox primitive. A process intending to send data places (&lt;strong&gt;puts&lt;/strong&gt;) the message into the mailbox, where it is temporarily stored in system-defined memory. The receiving process then retrieves (&lt;strong&gt;gets&lt;/strong&gt;) the message from the mailbox. This mechanism facilitates efficient and orderly communication between concurrent processes in a verification environment.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mealy Machine and Moore Machine</title>
      <link>https://24x7fpga.com/rtl_directory/2024_08_05_16_07_25_mealy_machine_and_moore_machine/</link>
      <pubDate>Mon, 05 Aug 2024 16:07:00 -0400</pubDate>
      <guid>https://24x7fpga.com/rtl_directory/2024_08_05_16_07_25_mealy_machine_and_moore_machine/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/RTL/tree/master/rtl_designs/fsm_seq&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/rtl_directory/2024_06_05_00_21_53_rtl_design_directory/&#34;&gt;RTL Design Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;finite-state-machine&#34;&gt;Finite State Machine&lt;/h2&gt;
&lt;p&gt;A Finite State Machine (FSM) is a mathematical model used to represent a system with a finite number of states and a set of transitions between those states, driven by inputs. Each state can be considered as a decision node, where the decision is based on the input and or the input and the current decision tree node.&lt;/p&gt;
&lt;h4 id=&#34;components-of-an-fsm&#34;&gt;Components of an FSM:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;States: Unique condition that define the state of the system.&lt;/li&gt;
&lt;li&gt;Inputs: Inputs are signals or data that trigger a state change.&lt;/li&gt;
&lt;li&gt;Transitions: Rules that dictate how the FSM moves from one state to another based on inputs.&lt;/li&gt;
&lt;li&gt;Outputs: Values that the FSM produces, based either on the state (Moore) or state and inputs (Mealy).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;d41d8c&#34;&gt;&lt;/h2&gt;
&lt;p&gt;The two main types of FSMs:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Always@(*) and Always_Comb</title>
      <link>https://24x7fpga.com/rtl_directory/2024_08_05_16_05_55_always_and_always_comb/</link>
      <pubDate>Mon, 05 Aug 2024 16:05:00 -0400</pubDate>
      <guid>https://24x7fpga.com/rtl_directory/2024_08_05_16_05_55_always_and_always_comb/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/RTL/tree/master/rtl_designs/always_at_comb&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/rtl_directory/2024_06_05_00_21_53_rtl_design_directory/&#34;&gt;RTL Design Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;always-----and-always-comb&#34;&gt;Always@(*) and Always_Comb&lt;/h2&gt;
&lt;p&gt;In digital design, both &lt;code&gt;always @(*)&lt;/code&gt; in Verilog and &lt;code&gt;always_comb&lt;/code&gt; in SystemVerilog are commonly used to model combinational logic. While they serve a similar purpose, there are important differences that make &lt;code&gt;always_comb&lt;/code&gt; the preferred choice in modern design flows. In this article, we&amp;rsquo;ll explore these differences and explain why always_comb offers enhanced safety and robustness over &lt;code&gt;always @(*)&lt;/code&gt; in SystemVerilog-based designs.&lt;/p&gt;
&lt;h3 id=&#34;always&#34;&gt;Always@(*)&lt;/h3&gt;
&lt;p&gt;In Verilog, the &lt;code&gt;always @(*)&lt;/code&gt; construct was introduced to simplify the sensitivity list in combinational logic. Instead of manually specifying every signal in the sensitivity list, &lt;code&gt;always @(*)&lt;/code&gt; automatically infers all the signals that are read within the always block. This feature not only saves time but also improves coding efficiency by eliminating potential errors from manually listing signals.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Git Sync a Forked Repository</title>
      <link>https://24x7fpga.com/git_directory/2024_08_04_14_34_41_git_sync_a_forked_repository/</link>
      <pubDate>Sun, 04 Aug 2024 14:34:00 -0400</pubDate>
      <guid>https://24x7fpga.com/git_directory/2024_08_04_14_34_41_git_sync_a_forked_repository/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=oJoyyTxtRRg&#34;&gt;Reference Video&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;git-sync-a-forked-repository&#34;&gt;Git Sync a Forked Repository&lt;/h2&gt;
&lt;p&gt;To sync a forked repository with the upstream repository (the original repository from which you forked), you can follow these steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add the parent repository/upstream repository if not already added:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-linux&#34; data-lang=&#34;linux&#34;&gt;git remote add {upstream/parent} {ssh original git repo}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;{upstream/parent} is user defined the name given to the original repo.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Once the original repository is added, &lt;a href=&#34;https://24x7fpga.com/git_directory/2024_08_04_12_24_44_git_pull/&#34;&gt;Git Pull&lt;/a&gt;  the original repository to the local repository:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Git Pull</title>
      <link>https://24x7fpga.com/git_directory/2024_08_04_12_24_44_git_pull/</link>
      <pubDate>Sun, 04 Aug 2024 12:24:00 -0400</pubDate>
      <guid>https://24x7fpga.com/git_directory/2024_08_04_12_24_44_git_pull/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://git-scm.com/docs/git-pull&#34;&gt;Git Pull Documentation&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;git-pull&#34;&gt;Git Pull&lt;/h2&gt;
&lt;p&gt;Git &lt;strong&gt;pull&lt;/strong&gt; is used to sync up the local repository with the remote repository. This command performs two operation:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;[Git Fetch]: will download the contents from the remote repository.&lt;/li&gt;
&lt;li&gt;[Git Rebase] or [Git Merge]: will update the local repository with the remote repository.&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    <item>
      <title>Events</title>
      <link>https://24x7fpga.com/sv_directory/2024_07_31_17_20_12_events/</link>
      <pubDate>Wed, 31 Jul 2024 17:20:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_07_31_17_20_12_events/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Interprocess communication is a way to communicate between different processes and testbench components. There are three mechanisms:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_31_17_20_12_events/&#34;&gt;Events&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_08_06_10_48_02_mailbox/&#34;&gt;Mailbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_08_06_12_53_53_semaphore/&#34;&gt;Semaphore&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;events&#34;&gt;Events&lt;/h2&gt;
&lt;p&gt;Events are static objects in SystemVerilog, used to synchronize different testbench components. The events are triggered using &lt;strong&gt;-&amp;gt;&lt;/strong&gt; or &lt;strong&gt;-&amp;gt;&amp;gt;&lt;/strong&gt; and the process can wait for the event to be triggered using  &lt;strong&gt;&lt;strong&gt;@&lt;/strong&gt;&lt;/strong&gt; operator or &lt;strong&gt;wait()&lt;/strong&gt; construct.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Event&lt;/th&gt;
          &lt;th&gt;Description&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;- &amp;gt;&lt;/td&gt;
          &lt;td&gt;Blocking events, also know as instanteous event, block the process untill the event is triggered.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;- &amp;gt;&amp;gt;&lt;/td&gt;
          &lt;td&gt;Non-blocking events, using this operator does not block the process. Can be used when two events are triggere at the same time.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;@&lt;/td&gt;
          &lt;td&gt;Blocks the calling process untill the given event is triggered. This is an edge-sensitive operator, hence, waiting event should be triggered before triggering an event to aviod blocking the waiting process.&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;wait()&lt;/td&gt;
          &lt;td&gt;Unlike &lt;strong&gt;&lt;strong&gt;@&lt;/strong&gt;&lt;/strong&gt; operator, the &lt;strong&gt;wait()&lt;/strong&gt; construct does not block the process. Triggering an event and waiting for an event can occur at the same time.&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This is a two stage mechanism where:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Encapsulation</title>
      <link>https://24x7fpga.com/sv_directory/2024_07_31_16_19_14_encapsulation/</link>
      <pubDate>Wed, 31 Jul 2024 16:19:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_07_31_16_19_14_encapsulation/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;encapsulation&#34;&gt;Encapsulation&lt;/h2&gt;
&lt;p&gt;Encapsulation is a technique used to restrict access to the data and methods within a class, ensuring that internal class details are not accessible from outside the class.&lt;/p&gt;
&lt;h3 id=&#34;access-specifiers&#34;&gt;Access Specifiers&lt;/h3&gt;
&lt;p&gt;These define the visibility of class members and they are as follows:&lt;/p&gt;
&lt;h4 id=&#34;local&#34;&gt;Local&lt;/h4&gt;
&lt;p&gt;Members declared as local are accessible only within the class itself.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Syntax&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;class ex;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   local &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; new();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#75715e&#34;&gt;// execute code
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;endfunction&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;endclass
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;protected&#34;&gt;Protected&lt;/h4&gt;
&lt;p&gt;Members declared as protected are accessible within the class and its derived classes.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Polymorphism</title>
      <link>https://24x7fpga.com/sv_directory/2024_07_31_10_26_49_polymorphism/</link>
      <pubDate>Wed, 31 Jul 2024 10:26:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_07_31_10_26_49_polymorphism/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/SystemVerilog_Verification/blob/main/sv_verification/polymorphism/tb_polymorphism.sv&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;polymorphism&#34;&gt;Polymorphism&lt;/h2&gt;
&lt;p&gt;As the term &amp;lsquo;polymorphism&amp;rsquo; implies, &amp;lsquo;poly&amp;rsquo; means &amp;lsquo;many&amp;rsquo; and &amp;lsquo;morph&amp;rsquo; means &amp;lsquo;form&amp;rsquo; or &amp;lsquo;shape&amp;rsquo;. A base class handle can invoke methods of its child class which has the same name. Hence, an object can take many forms.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An extended class object can be assigned to the base class but not the other way round.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_31_10_21_04_virtual_keyword/&#34;&gt;Virtual Keyword&lt;/a&gt; should be used in parent class to override the method by the child class.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;example-code&#34;&gt;Example Code&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Parent class
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;class parent_class;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// class properties or variables
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, b, s;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// task method
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;task&lt;/span&gt; func1 (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, b);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    s      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Non-Virtual: Parent Class =&amp;gt; a = %0d , b = %0d, sum s = %0d&amp;#34;&lt;/span&gt;, a, b, s);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;endtask&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  virtual &lt;span style=&#34;color:#66d9ef&#34;&gt;task&lt;/span&gt; func2 (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, b);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    s      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Virtual:     Parent Class =&amp;gt; a = %0d , b = %0d, sum s = %0d&amp;#34;&lt;/span&gt;, a, b, s);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;endtask&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;endclass
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Child Class
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;class child_class extends parent_class;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// class properties or variables
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, b, m;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// task method
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;task&lt;/span&gt; func1 (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, b);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    m      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; b;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Non-Virtual: Child Class  =&amp;gt; a = %0d , b = %0d, mul m = %0d&amp;#34;&lt;/span&gt;, a, b, m);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;endtask&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  virtual &lt;span style=&#34;color:#66d9ef&#34;&gt;task&lt;/span&gt; func2 (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, b); &lt;span style=&#34;color:#75715e&#34;&gt;// good practice to declare a class method as virtual
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    m      &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; b;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Virtual:     Child Class  =&amp;gt; a = %0d , b = %0d, mul m = %0d&amp;#34;&lt;/span&gt;, a, b, m);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;endtask&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;endclass
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; tb_polymorphism;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  parent_class pr_obj;          &lt;span style=&#34;color:#75715e&#34;&gt;// declare a handle for parent class
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  child_class cl_obj;           &lt;span style=&#34;color:#75715e&#34;&gt;// declare a handle for child class
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;task&lt;/span&gt; run(parent_class arg, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, b);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    arg.func1(a, b);            &lt;span style=&#34;color:#75715e&#34;&gt;// commented and uncomment to
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    arg.func2(a, b);            &lt;span style=&#34;color:#75715e&#34;&gt;// see the effects
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;endtask&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;initial&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     cl_obj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; new( );           &lt;span style=&#34;color:#75715e&#34;&gt;// construct an object
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     pr_obj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; new( );           &lt;span style=&#34;color:#75715e&#34;&gt;// WHEN THE CHILD CLASS HANDLE POINTS TO THE PARENT CLASS HANDLE
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;---------------------- Polymorphism ----------------------&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     run(pr_obj, &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     run(cl_obj, &lt;span style=&#34;color:#ae81ff&#34;&gt;30&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;endmodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://www.edaplayground.com/x/vU4b&#34;&gt;Execute the code in EDA Playground&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Virtual Keyword</title>
      <link>https://24x7fpga.com/sv_directory/2024_07_31_10_21_04_virtual_keyword/</link>
      <pubDate>Wed, 31 Jul 2024 10:21:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_07_31_10_21_04_virtual_keyword/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/SystemVerilog_Verification/blob/main/sv_verification/virtual_keyword/tb_virtual_keyword.sv&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;virtual-keyword&#34;&gt;Virtual Keyword&lt;/h2&gt;
&lt;p&gt;Virtual keyword enables a child class to override a method defined in its parent class. When a &lt;strong&gt;virtual&lt;/strong&gt; keyword is prefixed before a method in the parent class and if the base class handle is pointed to the extended class, then the extended class method handle will get assigned to the base class handle.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Once the virtual keyword is used for the parent class method, all the extended child classes become virtual.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;syntax&#34;&gt;Syntax&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// declaration
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;virtual &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; display();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// execute code
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;endfunction&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// usage
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;parent_class &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; child_class;   &lt;span style=&#34;color:#75715e&#34;&gt;// parent class is pointed to the child class
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;parent_class.display();       &lt;span style=&#34;color:#75715e&#34;&gt;// this calls the funtion display() in the base class if virtual keyword
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                              &lt;span style=&#34;color:#75715e&#34;&gt;// is NOT used, if the virtual keyword is used the function display() will
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;                              &lt;span style=&#34;color:#75715e&#34;&gt;// execute from the child class
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;d41d8c&#34;&gt;&lt;/h2&gt;
&lt;p&gt;In cases where the parent class and child class have methods with the same name and arguments, the method that gets executed depends on whether the method is declared as virtual or non-virtual in the parent class. The table below illustrates the behavior for both virtual and non-virtual method declarations in parent and child classes. The method column indicates the origin of the method execution.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Git Checkout</title>
      <link>https://24x7fpga.com/git_directory/2024_07_30_10_18_06_git_checkout/</link>
      <pubDate>Tue, 30 Jul 2024 10:18:00 -0400</pubDate>
      <guid>https://24x7fpga.com/git_directory/2024_07_30_10_18_06_git_checkout/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://git-scm.com/docs/git-checkout&#34;&gt;Git Checkout Documentation&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;git-checkout&#34;&gt;Git Checkout&lt;/h2&gt;
&lt;p&gt;Git checkout is used to switch or restore branches.&lt;/p&gt;
&lt;h3 id=&#34;switch-branch&#34;&gt;Switch Branch&lt;/h3&gt;
&lt;p&gt;From &lt;a href=&#34;https://24x7fpga.com/git_directory/2024_07_30_09_58_52_git_branch/&#34;&gt;Git Branch&lt;/a&gt;, you can identify the branch name to which you want to switch to.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-linux&#34; data-lang=&#34;linux&#34;&gt;git checkout &amp;lt;branch&amp;gt;
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Git Branch</title>
      <link>https://24x7fpga.com/git_directory/2024_07_30_09_58_52_git_branch/</link>
      <pubDate>Tue, 30 Jul 2024 09:58:00 -0400</pubDate>
      <guid>https://24x7fpga.com/git_directory/2024_07_30_09_58_52_git_branch/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://git-scm.com/docs/git-branch&#34;&gt;Git Branch Documentation&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;git-branch&#34;&gt;Git Branch&lt;/h2&gt;
&lt;h3 id=&#34;display-local-branches&#34;&gt;Display Local Branches&lt;/h3&gt;
&lt;p&gt;Displays local branches. The (*) asterisk symbol next to branch indicates the current branch.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-linux&#34; data-lang=&#34;linux&#34;&gt;git branch
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;display-remote-branches&#34;&gt;Display Remote Branches&lt;/h3&gt;
&lt;p&gt;Displays remote branches, i.e., branches hosted on the remote repositories.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;git branch --remote   // displays only remote repo
git branch -a         // displays remote and local repo
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;checking-remote-repository-information&#34;&gt;Checking Remote Repository Information&lt;/h3&gt;
&lt;p&gt;Provides remote repository information such as repository structure, configuration and branches.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-linux&#34; data-lang=&#34;linux&#34;&gt;git remote show origin
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>Super Keyword</title>
      <link>https://24x7fpga.com/sv_directory/2024_07_29_12_16_52_super_keyword/</link>
      <pubDate>Mon, 29 Jul 2024 12:16:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_07_29_12_16_52_super_keyword/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/SystemVerilog_Verification/blob/main/sv_verification/super_keyword/tb_super_keyword.sv&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;super-keyword&#34;&gt;Super Keyword&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;super&lt;/strong&gt; keyword is useful for accessing the properties and methods of a parent class without needing to declare a parent class handle. It consistently refers to the immediate parent class.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;By default, SystemVerilog complier calls &lt;strong&gt;super.new()&lt;/strong&gt; function call automatically from the extended class.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;When the class method require input arguments, the the user has to call &lt;strong&gt;super.new{arguments}&lt;/strong&gt;
explicitly.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note: &lt;em&gt;super.super.{class_member}&lt;/em&gt; is not allowed to access multilevel inheritance. Class members are inherited one level up in multiplevel inheritence.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Inheritance</title>
      <link>https://24x7fpga.com/sv_directory/2024_07_29_11_09_50_inheritance/</link>
      <pubDate>Mon, 29 Jul 2024 11:09:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_07_29_11_09_50_inheritance/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/SystemVerilog_Verification/blob/main/sv_verification/inheritance/tb_inheritance.sv&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;inheritance&#34;&gt;Inheritance&lt;/h2&gt;
&lt;p&gt;Inheritance allows a new class to inherit properties and methods from an existing class.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Creates an extended class from an existing class.&lt;/li&gt;
&lt;li&gt;The existing class is called as &lt;strong&gt;base class&lt;/strong&gt; or &lt;strong&gt;parent class&lt;/strong&gt; and the extended class is called as the &lt;strong&gt;derived class&lt;/strong&gt; or the &lt;strong&gt;child class&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;extends&lt;/strong&gt; keyword is used to inherit the properties of the parent class to the child class.&lt;/li&gt;
&lt;li&gt;Multilevel inheritance is possible in SystemVerilog i.e., a child class can be extended again which inturn can be extended.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;advantages&#34;&gt;Advantages&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Code reusablity.&lt;/li&gt;
&lt;li&gt;Provides over riding of parent class from the child class.&lt;/li&gt;
&lt;li&gt;Improves modularity of the code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note: to overide the parent class properties and methods, the child class should have the same name for class properties and methods. To access the parent class method or properties use &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_29_12_16_52_super_keyword/&#34;&gt;Super Keyword&lt;/a&gt; or create a handle for parent class.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Four Pillars of OOP</title>
      <link>https://24x7fpga.com/sv_directory/2024_07_29_10_30_53_four_pillars_of_oop/</link>
      <pubDate>Mon, 29 Jul 2024 10:30:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_07_29_10_30_53_four_pillars_of_oop/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;four-pillars-of-oop&#34;&gt;Four Pillars of OOP&lt;/h2&gt;
&lt;p&gt;The are four pillars of Object-Oriented Programming (OOP) are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Abstraction&lt;/li&gt;
&lt;li&gt;Encapsulation&lt;/li&gt;
&lt;li&gt;Inheritance&lt;/li&gt;
&lt;li&gt;Polymorphism&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;abstraction&#34;&gt;Abstraction&lt;/h3&gt;
&lt;p&gt;Abstraction is the concept of hiding the complex implementation details and showing only the essential features of the object. It allows users to interact with objects through a simplified interface, without needing to understand the underlying complexity.&lt;/p&gt;
&lt;h3 id=&#34;encapsulation&#34;&gt;Encapsulation&lt;/h3&gt;
&lt;p&gt;This principle involves bundling the data (attributes) and the methods (functions) that operate on the data into a single unit called an object. It restricts direct access to some of the object&amp;rsquo;s components, which is a means of preventing unintended interference and misuse of the data.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Vivado Installation</title>
      <link>https://24x7fpga.com/rtl_directory/2024_07_28_10_50_56_vivado_installation/</link>
      <pubDate>Sun, 28 Jul 2024 10:50:00 -0400</pubDate>
      <guid>https://24x7fpga.com/rtl_directory/2024_07_28_10_50_56_vivado_installation/</guid>
      <description>&lt;p&gt;Digilent&amp;rsquo;s &lt;a href=&#34;https://digilent.com/shop/zybo-z7-zynq-7000-arm-fpga-soc-development-board/&#34;&gt;Zybo-Z7&lt;/a&gt; is a ready-to-use embedded software and digital circuit development board built around the Xilinx Zynq™-7000 family. Xilinx provides free licensing to certain development boards and Zybo-Z7 is one among them. This article provides detailed steps to install Vivado 2022.2 on Ubuntu 22.04 LTS. The same procedure can be followed to install the desired version of the software.&lt;/p&gt;
&lt;h2 id=&#34;initial-requirements&#34;&gt;Initial Requirements&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;A desktop/laptop with at least 16GB of RAM (DDR4 preferred) and 100GB of free storage space for full installation.&lt;/li&gt;
&lt;li&gt;Create an &lt;a href=&#34;https://www.amd.com/en/registration/create-account.html&#34;&gt;AMD Xilinx Account&lt;/a&gt; to download the software.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;More information regarding the system requirements is detailed in the Vivado Design Suite User Guide &lt;a href=&#34;https://www.xilinx.com/support/documents/sw_manuals/xilinx2022_2/ug973-vivado-release-notes-install-license.pdf&#34;&gt;UG973&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Blocking and Non-Blocking Assignment</title>
      <link>https://24x7fpga.com/rtl_directory/2024_07_26_17_10_23_blocking_and_non_blocking_assignment/</link>
      <pubDate>Fri, 26 Jul 2024 17:10:00 -0400</pubDate>
      <guid>https://24x7fpga.com/rtl_directory/2024_07_26_17_10_23_blocking_and_non_blocking_assignment/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/RTL/tree/master/rtl_designs/block_vs_non_block&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/rtl_directory/2024_06_05_00_21_53_rtl_design_directory/&#34;&gt;RTL Design Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;blocking-and-non-blocking-assignment&#34;&gt;Blocking and Non-Blocking Assignment&lt;/h2&gt;
&lt;p&gt;Let us model a simple design that is given in Figure 1 in Verilog. There are many ways to optimally model the design but here we will learn the difference between blocking and non-blocking assignments in Verilog.&lt;/p&gt;
&lt;h4 id=&#34;boolean-equation&#34;&gt;Boolean Equation&lt;/h4&gt;
&lt;p&gt;We will model our design based on the equations given below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#66d9ef&#34;&gt;and&lt;/span&gt; b
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x &lt;span style=&#34;color:#66d9ef&#34;&gt;xor&lt;/span&gt; c
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;z &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;d41d8c&#34;&gt;&lt;/h3&gt;
&lt;figure class=&#34;center !important&#34;&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;https://24x7fpga.com/ox-hugo/b_&amp;amp;_b.svg&#34;
         alt=&#34;Figure 1: Digital Logic&#34; width=&#34;500px&#34;/&gt; &lt;figcaption&gt;
            &lt;p&gt;&lt;!-- raw HTML omitted --&gt;Figure 1: &lt;!-- raw HTML omitted --&gt;Digital Logic&lt;/p&gt;</description>
    </item>
    <item>
      <title>Assign and If-Else Statement</title>
      <link>https://24x7fpga.com/rtl_directory/2024_07_26_17_07_08_assign_and_if_else_statement/</link>
      <pubDate>Fri, 26 Jul 2024 17:07:00 -0400</pubDate>
      <guid>https://24x7fpga.com/rtl_directory/2024_07_26_17_07_08_assign_and_if_else_statement/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/RTL/tree/master/rtl_designs/assign_vs_if&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/rtl_directory/2024_06_05_00_21_53_rtl_design_directory/&#34;&gt;RTL Design Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;assign-statement&#34;&gt;Assign Statement&lt;/h2&gt;
&lt;p&gt;The &amp;lsquo;assign&amp;rsquo; statement is used to model combinational logic by creating continuous assignments. It is typically implemented where the output continuously reflects the changes in the input without any delay. The assign statement is used with signals declared as wire, tri, or other net types, but not with reg types. However, in SystemVerilog, logic type can be used in continuous assignments, similar to wire.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Full Case and Parallel Case</title>
      <link>https://24x7fpga.com/rtl_directory/2024_07_26_17_05_01_full_case_and_parallel_case/</link>
      <pubDate>Fri, 26 Jul 2024 17:05:00 -0400</pubDate>
      <guid>https://24x7fpga.com/rtl_directory/2024_07_26_17_05_01_full_case_and_parallel_case/</guid>
      <description>&lt;p&gt;[Source] &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/rtl_directory/2024_06_05_00_21_53_rtl_design_directory/&#34;&gt;RTL Design Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;full-case-and-parallel-case&#34;&gt;Full Case and Parallel Case&lt;/h2&gt;
&lt;p&gt;The &lt;em&gt;case&lt;/em&gt; statement is a fundamental construct used for conditional branching across various programming languages. In SystemVerilog, it is implemented as a simple if-else-if statement. SystemVerilog introduces two specialized variations of the case statement, casex and casez, that allow for handling &amp;ldquo;don&amp;rsquo;t care&amp;rdquo; conditions in the case items, discussed in &lt;a href=&#34;https://24x7fpga.com/rtl_directory/2024_07_25_11_36_52_casex_and_casez/&#34;&gt;Casex and Casez&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The case statement can be caterogired as &lt;strong&gt;full&lt;/strong&gt; and &lt;strong&gt;parallel&lt;/strong&gt; based on the how the case items are being matched to case expression.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Shallow Copy and Deep Copy</title>
      <link>https://24x7fpga.com/sv_directory/2024_07_26_09_41_22_shallow_copy_and_deep_copy/</link>
      <pubDate>Fri, 26 Jul 2024 09:41:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_07_26_09_41_22_shallow_copy_and_deep_copy/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/SystemVerilog_Verification/tree/main&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;shallow-copy-and-deep-copy&#34;&gt;Shallow Copy and Deep Copy&lt;/h2&gt;
&lt;p&gt;SystemVerilog provides two means of copying or duplicating objects to keep a method from modifying the original. The two methods are shallow copy and deep copy, and understanding these methods is crucial for effective memory management.&lt;/p&gt;
&lt;h3 id=&#34;shallow-copy&#34;&gt;Shallow Copy&lt;/h3&gt;
&lt;p&gt;Shallow copy is a method where the objects are duplicated to a new memory location. If the class contains a handle to another class, only the handle&amp;rsquo;s value is copied not the lower level object, meaning both the original and copied object share the same instances of nested objects.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Static Class Properties and Methods</title>
      <link>https://24x7fpga.com/sv_directory/2024_07_25_14_51_44_static_class_properties_and_methods/</link>
      <pubDate>Thu, 25 Jul 2024 14:51:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_07_25_14_51_44_static_class_properties_and_methods/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;static-class-properties-and-methods&#34;&gt;Static Class Properties and Methods&lt;/h2&gt;
&lt;p&gt;Every object has its own local variables that are not shared with any other object. When two objects of Ex_class &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_24_16_47_44_class/&#34;&gt;Class&lt;/a&gt; is created, each object with have its own class properties(variables). In certain instances, a specific variable is required to be shared by all objects of a certain type. Declaring a global variable will make the variable visible to the entire testbench. With the OOP, a static variable can be created inside a class. This variable is shared amongst all the instances of the class.&lt;/p&gt;</description>
    </item>
    <item>
      <title>This Keyword</title>
      <link>https://24x7fpga.com/sv_directory/2024_07_25_14_49_57_this_keyword/</link>
      <pubDate>Thu, 25 Jul 2024 14:49:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_07_25_14_49_57_this_keyword/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/SystemVerilog_Verification/blob/main/sv_verification/this_keyword/tb_this_keyword.sv&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;this-keyword&#34;&gt;This Keyword&lt;/h2&gt;
&lt;p&gt;In SystemVerilog, &lt;strong&gt;this&lt;/strong&gt; keyword is used within a class to refer to the current instance of that class. It is a way to access the members (attributes and methods) of the current object from within the object&amp;rsquo;s methods. This is particularly useful to distinguish between class attributes and parameters or local variables with the same name. When a variable is declared, SystemVerilog looks in the current scope for it and then in the parent scope until the variable is found. The &lt;strong&gt;this&lt;/strong&gt; keyword is a way of keeping the search within the class type, skipping variables declared within the method as well as anything outside the class type hierarchy. It should only be used in non-static class methods.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Method</title>
      <link>https://24x7fpga.com/sv_directory/2024_07_25_12_36_42_method/</link>
      <pubDate>Thu, 25 Jul 2024 12:36:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_07_25_12_36_42_method/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/SystemVerilog_Verification/tree/main&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;class-methods&#34;&gt;Class Methods&lt;/h2&gt;
&lt;p&gt;A class method is a task or a function defined inside the scope of the class. A method in a class uses &lt;strong&gt;automatic&lt;/strong&gt; storage by default.&lt;/p&gt;
&lt;h4 id=&#34;example-method-in-a-class&#34;&gt;Example: &lt;a href=&#34;https://github.com/24x7fpga/SystemVerilog_Verification/blob/main/sv_verification/ex_class/tb_ex_class.sv&#34;&gt;Method in a Class&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;class Ex_class;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// class properties or variables
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, b, s;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// task method
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;task&lt;/span&gt; sum (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a,b);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a = %0d , b = %0d, sum s = %0d&amp;#34;&lt;/span&gt;, a, b ,s);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;endtask&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;endclass
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;defining-methods-outside-of-class&#34;&gt;Defining Methods Outside of Class&lt;/h3&gt;
&lt;p&gt;To keep the code short, and easy to read and understand, it is advisable to keep the class to one &amp;ldquo;page&amp;rdquo; or to the screen of the editor. In case, if a method takes more than a page, you can break the method into the prototype(method name and arguments) inside the class, and the body(the procedural code) outside the class. To create an out-of-block declaration,&lt;/p&gt;</description>
    </item>
    <item>
      <title>Casex and Casez</title>
      <link>https://24x7fpga.com/rtl_directory/2024_07_25_11_36_52_casex_and_casez/</link>
      <pubDate>Thu, 25 Jul 2024 11:36:00 -0400</pubDate>
      <guid>https://24x7fpga.com/rtl_directory/2024_07_25_11_36_52_casex_and_casez/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/RTL/tree/master/rtl_designs/casex_nd_casez&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/rtl_directory/2024_06_05_00_21_53_rtl_design_directory/&#34;&gt;RTL Design Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;case-statement-an-overview&#34;&gt;Case Statement: An Overview&lt;/h2&gt;
&lt;p&gt;The &lt;strong&gt;case&lt;/strong&gt; statement is a fundamental construct in any programming language. The case statement selects one of many outputs based on the value of the case expression. It is equicalent to an if-else-if statement.&lt;/p&gt;
&lt;h4 id=&#34;syntax&#34;&gt;Syntax&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; expression)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; item1 &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; statement_1;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; item2 &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; statement_2;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; item3 &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; statement_3;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; statement_default;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;endcase&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;Case Expression: The case statement chooses the &lt;em&gt;case item&lt;/em&gt; based on the case expression.&lt;/li&gt;
&lt;li&gt;Case Item: Case item is an expression,  bit or a vector. When the case expression matches the case item, case statement will be executed.&lt;/li&gt;
&lt;li&gt;Case Statement: Case item is single or a block of code that will be execute when the case item matched the case expression.&lt;/li&gt;
&lt;li&gt;Default Case: The default case is optional but recommend to hancdle any values that do not match the specified case item.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;case-variants&#34;&gt;Case Variants&lt;/h3&gt;
&lt;p&gt;There are two case variants for called &lt;strong&gt;casex&lt;/strong&gt; and &lt;strong&gt;casez&lt;/strong&gt; more flexible case item matching.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Synchronous and Asynchronous Reset</title>
      <link>https://24x7fpga.com/rtl_directory/2024_07_25_11_34_45_synchronous_and_asynchronous_reset/</link>
      <pubDate>Thu, 25 Jul 2024 11:34:00 -0400</pubDate>
      <guid>https://24x7fpga.com/rtl_directory/2024_07_25_11_34_45_synchronous_and_asynchronous_reset/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/RTL/tree/master/rtl_designs/asyn_rst&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/rtl_directory/2024_06_05_00_21_53_rtl_design_directory/&#34;&gt;RTL Design Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;synchronous-and-asynchronous-reset&#34;&gt;Synchronous and Asynchronous Reset&lt;/h2&gt;
&lt;p&gt;Resets are crucial in digital circuits for ensuring the system starts from a known state.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Resets allow the system to recover from errors by reinitializing the state.&lt;/li&gt;
&lt;li&gt;Resets ensure that all flip-flops start from a known state.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are two types of resets based on the reset activation and they are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Synchronous Reset&lt;/li&gt;
&lt;li&gt;Asynchronous Reset&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;synchronous-reset&#34;&gt;Synchronous Reset&lt;/h3&gt;
&lt;p&gt;In synchronous reset circuits, the reset signal is synchronized with the clock. When the reset is applied, the action only occurs at clock edges (positive or negative edge), avoiding glitches and metastability. The coding style to model synchronous reset is an &lt;strong&gt;if/else&lt;/strong&gt; priority style with reset in the &lt;strong&gt;if&lt;/strong&gt; condition and all the other logic in the &lt;strong&gt;else&lt;/strong&gt; section. This type of logic will be implemented as shown in the figure below:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Handle</title>
      <link>https://24x7fpga.com/sv_directory/2024_07_24_22_09_00_handle/</link>
      <pubDate>Wed, 24 Jul 2024 22:09:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_07_24_22_09_00_handle/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;handle&#34;&gt;Handle&lt;/h2&gt;
&lt;p&gt;A handle is a pointer to an object created from a &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_24_16_47_44_class/&#34;&gt;Class&lt;/a&gt;. Handles are crucial in dynamically creating and managing &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_24_17_42_06_object/&#34;&gt;Object&lt;/a&gt;s during simulation.&lt;/p&gt;
&lt;h3 id=&#34;syntax-handle&#34;&gt;Syntax: Handle&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Ex_class cl_obj;    &lt;span style=&#34;color:#75715e&#34;&gt;// declare a handle
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;cl_obj &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; new();     &lt;span style=&#34;color:#75715e&#34;&gt;// allocate a Ex_class object
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;d41d8c&#34;&gt;&lt;/h2&gt;
&lt;p&gt;When the handle &amp;lsquo;cl_obj&amp;rsquo; is declared, it is initialized to a &lt;strong&gt;null&lt;/strong&gt; value. Call the &lt;strong&gt;new()&lt;/strong&gt; function to construct the &lt;strong&gt;Ex_class&lt;/strong&gt; object. The new function allocates space for Ex_class, initializes the variables to their default values (0 for 2-state and x for 4-state variable), and returns the address where the object is stored. This is similar to calling a malloc function in C language. The new function is called the &lt;strong&gt;constructor&lt;/strong&gt;, as it builds the object.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Object</title>
      <link>https://24x7fpga.com/sv_directory/2024_07_24_17_42_06_object/</link>
      <pubDate>Wed, 24 Jul 2024 17:42:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_07_24_17_42_06_object/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/SystemVerilog_Verification/blob/main/sv_verification/ex_class/tb_ex_class.sv&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;object&#34;&gt;Object&lt;/h2&gt;
&lt;p&gt;An object is an instance of a class. It is similar to the instantiation of a module in Verilog, but there are some differences which as listed in the table below:&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Verilog Module Instance&lt;/th&gt;
          &lt;th&gt;SystemVerilog Class Instance&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;A module is instantiated during compile time&lt;/td&gt;
          &lt;td&gt;A class is instantiated during simulation when needed by the testbench&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;Verilog instances are static, as hardware does not change during simulation&lt;/td&gt;
          &lt;td&gt;Class objects are created when required and freed from memory when no longer needed&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The &lt;strong&gt;&amp;rsquo;new&amp;rsquo;&lt;/strong&gt; keyword is used to instantiate the object.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Class</title>
      <link>https://24x7fpga.com/sv_directory/2024_07_24_16_47_44_class/</link>
      <pubDate>Wed, 24 Jul 2024 16:47:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_07_24_16_47_44_class/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/SystemVerilog_Verification/blob/main/sv_verification/ex_class/tb_ex_class.sv&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;class&#34;&gt;Class&lt;/h2&gt;
&lt;p&gt;A class is a user-defined data type that serves as a blue-print for creating objects. A class includes properties(variables) and methods(functions and tasks) that manipulate data.&lt;/p&gt;
&lt;h4 id=&#34;example-class&#34;&gt;Example: Class&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;class Ex_class;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// class properties or variables
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a, b, s;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// task method
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;task&lt;/span&gt; sum (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; a,b);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    s &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a = %0d , b = %0d, sum s = %0d&amp;#34;&lt;/span&gt;, a, b ,s);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;endtask&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;endclass
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;d41d8c&#34;&gt;&lt;/h2&gt;
&lt;p&gt;A class can be defined and used in a program, module, package, or outside of any of these. A set of classes can be grouped in a &lt;strong&gt;package&lt;/strong&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Object-Oriented Programming</title>
      <link>https://24x7fpga.com/sv_directory/2024_07_24_15_11_27_object_oriented_programming/</link>
      <pubDate>Wed, 24 Jul 2024 15:11:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_07_24_15_11_27_object_oriented_programming/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;object-oriented-programming&#34;&gt;Object-Oriented Programming&lt;/h2&gt;
&lt;p&gt;Object-oriented Programming(OOP) language model for software design that revolves around objects or data instead of logic and functions. It focuses on what the developers want to manipulate rather than how they manipulate them. This approach is well suited for large, complex, and actively updated and maintained.&lt;/p&gt;
&lt;h3 id=&#34;oop-for-verification&#34;&gt;OOP for Verification&lt;/h3&gt;
&lt;p&gt;Typically, a testbench creates a transaction i.e., generates the necessary input for the DUT based on the defined rules, transmits it to the DUT, receives the response from the DUT, verifies the response against the golden reference, and generates a report. Grouping all the processes together helps in creating and maintaining large testbenches. However, while verifying a large design the process of detecting a bug in the testbench becomes tedious and complex. Also, when verifying a bus transaction, multiple arrays are required to store data and addresses. For N transactions, N*(multiple arrays) is required. Moreover, these arrays are static, meaning they are allocated at the compile time with a fixed array size, if the verification requires any additional arrays during run time, changes are needed to be made in the source code manually. To overcome these drawbacks, concepts from OOP is applied in SystemVerilog to improve the design&amp;rsquo;s modularity and reusability.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Throughput and Latency</title>
      <link>https://24x7fpga.com/rtl_directory/2024_07_23_21_33_58_throughput_and_latency/</link>
      <pubDate>Tue, 23 Jul 2024 21:33:00 -0400</pubDate>
      <guid>https://24x7fpga.com/rtl_directory/2024_07_23_21_33_58_throughput_and_latency/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Speed in digital design can have three primary meanings/definitions based on the context of the problem. There are as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Throughput: refers to the amount of time a system takes to process the data per clock cycle, measured in bits per second.&lt;/li&gt;
&lt;li&gt;Latency: refers to the time between the input and the processed output, measured as clock cycles.&lt;/li&gt;
&lt;li&gt;Timing: refers to the logic delays between the sequential elements, the standard metric is clock period or frequency.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here, the impacts of timing based on architecture designs and optimizations will be discussed.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Disable Fork</title>
      <link>https://24x7fpga.com/sv_directory/2024_07_23_17_27_50_disable_fork/</link>
      <pubDate>Tue, 23 Jul 2024 17:27:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_07_23_17_27_50_disable_fork/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/SystemVerilog_Verification/blob/main/sv_verification/fork_join_disable/tb_fork_join_disable.sv&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;disable-fork&#34;&gt;Disable Fork&lt;/h2&gt;
&lt;p&gt;The disable fork contruct will terminate all outstanding or active processes when it is executed.&lt;/p&gt;
&lt;h4 id=&#34;syntax-disable-fork&#34;&gt;Syntax: Disable Fork&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fork&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// process 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// process 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// process 3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;join&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;disable&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fork&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;example-code-disable-fork&#34;&gt;Example Code: Disable Fork&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; tb_fork_join_disable;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;initial&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fork&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      #&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;  $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t = %0t, fork 1 =&amp;gt; process 1&amp;#34;&lt;/span&gt;, $time);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      #&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t = %0t, fork 1 =&amp;gt; process 2&amp;#34;&lt;/span&gt;, $time);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      #&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;  $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t = %0t, fork 1 =&amp;gt; process 3&amp;#34;&lt;/span&gt;, $time);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    join_any
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--------------- Exited Fork 1 ---------------&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;initial&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fork&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      #&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t = %0t, fork 2 =&amp;gt; process 1&amp;#34;&lt;/span&gt;, $time);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      #&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t = %0t, fork 2 =&amp;gt; process 2&amp;#34;&lt;/span&gt;, $time);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      #&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t = %0t, fork 2 =&amp;gt; process 3&amp;#34;&lt;/span&gt;, $time);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    join_none
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;disable&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fork&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--------------- Exited Fork 2 ---------------&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;endmodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://www.edaplayground.com/x/JX_E&#34;&gt;Execute the code in EDA Playground&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Wait Fork</title>
      <link>https://24x7fpga.com/sv_directory/2024_07_23_17_27_07_wait_fork/</link>
      <pubDate>Tue, 23 Jul 2024 17:27:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_07_23_17_27_07_wait_fork/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/SystemVerilog_Verification/blob/main/sv_verification/fork_join_wait/tb_fork_join_wait.sv&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;wait-fork&#34;&gt;Wait Fork&lt;/h2&gt;
&lt;p&gt;The wait fork statement is used to wait until all the forked processes is completed.&lt;/p&gt;
&lt;h4 id=&#34;syntax-wait-fork&#34;&gt;Syntax: Wait Fork&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fork&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// process 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// process 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// process 3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;join_none &lt;span style=&#34;color:#75715e&#34;&gt;// (join, join_any)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;wait&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fork&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;example-code-wait-fork&#34;&gt;Example Code: Wait Fork&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; tb_fork_join_wait;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;initial&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fork&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      #&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;  $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t = %0t, fork 1 =&amp;gt; process 1&amp;#34;&lt;/span&gt;, $time);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      #&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t = %0t, fork 1 =&amp;gt; process 2&amp;#34;&lt;/span&gt;, $time);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      #&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;  $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t = %0t, fork 1 =&amp;gt; process 3&amp;#34;&lt;/span&gt;, $time);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    join_any
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--------------- Exited Fork 1 ---------------&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;initial&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fork&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      #&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t = %0t, fork 2 =&amp;gt; process 1&amp;#34;&lt;/span&gt;, $time);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      #&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t = %0t, fork 2 =&amp;gt; process 2&amp;#34;&lt;/span&gt;, $time);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      #&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t = %0t, fork 2 =&amp;gt; process 3&amp;#34;&lt;/span&gt;, $time);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    join_none
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;wait&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fork&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--------------- Exited Fork 2 ---------------&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;endmodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://www.edaplayground.com/x/D8DN&#34;&gt;Execute the code in EDA Playground&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Read Only Memory</title>
      <link>https://24x7fpga.com/rtl_directory/2024_07_23_13_11_22_read_only_memory/</link>
      <pubDate>Tue, 23 Jul 2024 13:11:00 -0400</pubDate>
      <guid>https://24x7fpga.com/rtl_directory/2024_07_23_13_11_22_read_only_memory/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/RTL/tree/master/rtl_designs/rom&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/rtl_directory/2024_06_05_00_21_53_rtl_design_directory/&#34;&gt;RTL Design Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;read-only-memory--rom--an-overview&#34;&gt;Read Only Memory(ROM): An Overview&lt;/h2&gt;
&lt;p&gt;Read-only memory widely known as ROM is a non-volatile memory that is used to store data or programs that do not change over time. As the name suggests, data can only be read from the memory. In digital design, ROM can be used to store image data or signal data for processing.&lt;/p&gt;
&lt;h4 id=&#34;memory-file&#34;&gt;Memory File&lt;/h4&gt;
&lt;p&gt;A memory file is a simple file with an extension of *.mem that can store data in decimal, binary, or hexadecimal format. An example of a seven-segment ROM file is shown below:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Frequency Divider</title>
      <link>https://24x7fpga.com/rtl_directory/2024_07_22_15_24_11_frequency_divider/</link>
      <pubDate>Mon, 22 Jul 2024 15:24:00 -0400</pubDate>
      <guid>https://24x7fpga.com/rtl_directory/2024_07_22_15_24_11_frequency_divider/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/RTL/tree/master/rtl_designs/freq_div&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/rtl_directory/2024_06_05_00_21_53_rtl_design_directory/&#34;&gt;RTL Design Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;frequency-divider-an-overview&#34;&gt;Frequency Divider: An Overview&lt;/h2&gt;
&lt;p&gt;A frequency divider is a digital circuit that reduces the frequency of the main clock by a certain factor. They are typically used in clock generation circuits, timers, counters, etc. Frequency dividers can be categorized into two even and odd frequency dividers based on the factor N. If N is an even number the frequency divider is categorized under an even frequency divider and when N is an odd number it is categorized as an odd frequency divider.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Edge Detector</title>
      <link>https://24x7fpga.com/rtl_directory/2024_07_22_14_10_16_edge_detector/</link>
      <pubDate>Mon, 22 Jul 2024 14:10:00 -0400</pubDate>
      <guid>https://24x7fpga.com/rtl_directory/2024_07_22_14_10_16_edge_detector/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/RTL/tree/master/rtl_designs/edge_detect&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/rtl_directory/2024_06_05_00_21_53_rtl_design_directory/&#34;&gt;RTL Design Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;edge-detector-an-overview&#34;&gt;Edge Detector: An Overview&lt;/h2&gt;
&lt;p&gt;Edge detectors play a crucial role in synchronous systems to generate a short pulse when a transition of a signal occurs from low to high or high to low. These short pulses are used to trigger an event or generate an interrupt.&lt;/p&gt;
&lt;p&gt;There are three types of edge detectors, and they are as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Rising edge detector: detects a signal transition from low to high.&lt;/li&gt;
&lt;li&gt;Falling edge detector: detects a signal transition from high to low.&lt;/li&gt;
&lt;li&gt;Dual edge detector: detects both rising and falling edges of a signal.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;verilog-code&#34;&gt;Verilog Code&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; edge_detect(&lt;span style=&#34;color:#75715e&#34;&gt;/*AUTOARG*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// Outputs
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   posEdge, negEdge, dualEdge,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// Inputs
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   clk, rst, din
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt; clk;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt; rst;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt; din;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;output&lt;/span&gt; posEdge;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;output&lt;/span&gt; negEdge;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;output&lt;/span&gt; dualEdge;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;/*AUTOREG*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;/*AUTOWIRE*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;reg&lt;/span&gt;	  din_reg;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;always&lt;/span&gt;@(&lt;span style=&#34;color:#66d9ef&#34;&gt;posedge&lt;/span&gt; clk)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;rst)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               din_reg &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;&amp;#39;h0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;             &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;               din_reg &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; din;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// Posedge detection
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;assign&lt;/span&gt; posEdge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;din_reg) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; din;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// Negedge detection
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;assign&lt;/span&gt; negEdge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; din_reg &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;din);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// Dualedge detection
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;assign&lt;/span&gt; dualEdge &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; posEdge &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt; negEdge;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;endmodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Ring Counter</title>
      <link>https://24x7fpga.com/rtl_directory/2024_07_22_11_17_17_ring_counter/</link>
      <pubDate>Mon, 22 Jul 2024 11:17:00 -0400</pubDate>
      <guid>https://24x7fpga.com/rtl_directory/2024_07_22_11_17_17_ring_counter/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/RTL/tree/master/rtl_designs/ring_cntr&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/rtl_directory/2024_06_05_00_21_53_rtl_design_directory/&#34;&gt;RTL Design Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;ring-counter-an-overview&#34;&gt;Ring Counter: An Overview&lt;/h2&gt;
&lt;p&gt;A ring counter is a type of shift register that where the output of the last register is fed to the input of the first register forming a type of circular shift register. There are two types of ring counters based on how the last bit is fed to the input and they are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Simple Ring Counter&lt;/li&gt;
&lt;li&gt;Twisted Ring Counter&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;simple-ring-counter&#34;&gt;Simple Ring Counter&lt;/h3&gt;
&lt;p&gt;A simple ring counter is where the output of the last register is fed to the input of the first register. At reset, the initial values of the first register is set to high (&amp;lsquo;1&amp;rsquo;) and the rest to low (&amp;lsquo;0&amp;rsquo;). On every clock cycle, the initial set bit is shifted right. Therefore, the total number of unused states is given by (2**N-N) where N is the input width. For a 4-bit simple ring counter, the input N = 4, the total states are 2**4 = 16 and the total number of unused states is 2**4 - 4 = 12.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Fork Join None</title>
      <link>https://24x7fpga.com/sv_directory/2024_07_20_22_11_00_fork_join_none/</link>
      <pubDate>Sat, 20 Jul 2024 22:11:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_07_20_22_11_00_fork_join_none/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;fork-join-none&#34;&gt;Fork Join None&lt;/h2&gt;
&lt;p&gt;As the name suggests, the process in the fork will start and does not wait till it completes any of the threads. The figure below depicts the fork join none constructs.&lt;/p&gt;
&lt;figure class=&#34;center !important&#34;&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;https://24x7fpga.com/ox-hugo/fork_join_none.svg&#34; width=&#34;400px&#34;/&gt; 
&lt;/figure&gt;

&lt;h4 id=&#34;syntax-fork-join-none&#34;&gt;Syntax: Fork Join None&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fork&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// process 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// process 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// process 3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;join_none
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;example-code-fork-join-none&#34;&gt;Example Code: Fork Join None&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; fork_join_any;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;initial&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fork&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      #&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;  $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t = %0t, fork 1 =&amp;gt; process 1&amp;#34;&lt;/span&gt;, $time);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      #&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t = %0t, fork 1 =&amp;gt; process 2&amp;#34;&lt;/span&gt;, $time);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      #&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;  $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t = %0t, fork 1 =&amp;gt; process 3&amp;#34;&lt;/span&gt;, $time);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    join_none
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--------------- Exited Fork 1 ---------------&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;initial&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fork&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      #&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t = %0t, fork 2 =&amp;gt; process 1&amp;#34;&lt;/span&gt;, $time);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      #&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t = %0t, fork 2 =&amp;gt; process 2&amp;#34;&lt;/span&gt;, $time);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      #&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t = %0t, fork 2 =&amp;gt; process 3&amp;#34;&lt;/span&gt;, $time);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    join_none
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--------------- Exited Fork 2 ---------------&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;endmodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Fork Join Any</title>
      <link>https://24x7fpga.com/sv_directory/2024_07_20_21_58_50_fork_join_any/</link>
      <pubDate>Sat, 20 Jul 2024 21:58:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_07_20_21_58_50_fork_join_any/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/SystemVerilog_Verification/blob/main/sv_verification/fork_join_any/tb_fork_join_any.sv&#34;&gt;Source&lt;/a&gt;&amp;ndash; &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;fork-join-any&#34;&gt;Fork Join Any&lt;/h2&gt;
&lt;p&gt;Fork join any construct is similar to &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_20_21_47_05_fork_join/&#34;&gt;Fork Join&lt;/a&gt; but the simulation process does not wait till all the threads are completed. It proceeds to the next execution statement as soon as any one of the threads completes the process.&lt;/p&gt;
&lt;p&gt;Fork join any is depicted in the figure below.&lt;/p&gt;
&lt;figure class=&#34;center !important&#34;&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;https://24x7fpga.com/ox-hugo/fork_join_any.svg&#34; width=&#34;400px&#34;/&gt; 
&lt;/figure&gt;

&lt;h4 id=&#34;syntax-fork-join-any&#34;&gt;Syntax: Fork Join Any&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fork&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// process 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// process 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// process 3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;join_any
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;example-code-fork-join-any&#34;&gt;Example Code: Fork Join Any&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; tb_fork_join_any;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;initial&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fork&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      #&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;  $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t = %0t, fork 1 =&amp;gt; process 1&amp;#34;&lt;/span&gt;, $time);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      #&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt; $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t = %0t, fork 1 =&amp;gt; process 2&amp;#34;&lt;/span&gt;, $time);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      #&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;  $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t = %0t, fork 1 =&amp;gt; process 3&amp;#34;&lt;/span&gt;, $time);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    join_any
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--------------- Exited Fork 1 ---------------&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;initial&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fork&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      #&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t = %0t, fork 2 =&amp;gt; process 1&amp;#34;&lt;/span&gt;, $time);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      #&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt; $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t = %0t, fork 2 =&amp;gt; process 2&amp;#34;&lt;/span&gt;, $time);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      #&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;t = %0t, fork 2 =&amp;gt; process 3&amp;#34;&lt;/span&gt;, $time);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    join_any
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--------------- Exited Fork 2 ---------------&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;endmodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://www.edaplayground.com/x/SF2j&#34;&gt;Execute the code in EDA Playground&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Fork Join</title>
      <link>https://24x7fpga.com/sv_directory/2024_07_20_21_47_05_fork_join/</link>
      <pubDate>Sat, 20 Jul 2024 21:47:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_07_20_21_47_05_fork_join/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/SystemVerilog_Verification/blob/main/sv_verification/fork_join/tb_fork_join.sv&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;fork-join&#34;&gt;Fork Join&lt;/h2&gt;
&lt;p&gt;A thread or a process is a block of code that execute sequentially. They are created using constructs like initial blocks, always blocks, and tasks. In verification there are multiple components, such as generator, driver, monitor, etc, these components have multiple threads that need to run concurrently, allowing for parallel execution of different parts of the simulation. The fork-join construct is created to run multiple procedural threads to run in parallel. Once the fork starts to execute the threads, it will wait until all the threads are completed to proceed with the execution.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Functions</title>
      <link>https://24x7fpga.com/sv_directory/2024_07_20_15_36_43_functions/</link>
      <pubDate>Sat, 20 Jul 2024 15:36:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_07_20_15_36_43_functions/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/SystemVerilog_Verification/blob/main/sv_verification/function_ex/tb_function_ex.sv&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;functions&#34;&gt;Functions&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;A function must return a value.&lt;/li&gt;
&lt;li&gt;A function should not include delays, event controls, or wait statements.&lt;/li&gt;
&lt;li&gt;A function can only contain inputs as arguments as it returns only one output value.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Similar to tasks:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A function can be declared as automatic or static.&lt;/li&gt;
&lt;li&gt;It can contain static variables in automatic function and vice-versa.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;syntax-function&#34;&gt;Syntax: Function&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt;] function_name  (input_arguments);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// execute the code
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; [value];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;endfunction&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;example-code-function&#34;&gt;Example Code: Function&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; tb_function_ex;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; mul_3(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; x&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;endfunction&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;initial&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; x;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;---------- Multiply by 3 ----------&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;repeat&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;)&lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; $urandom_range(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x = %0d, mul_by_3 = %0d&amp;#34;&lt;/span&gt;, x, mul_3(x));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;endmodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://www.edaplayground.com/x/Agft&#34;&gt;Execute the code in EDA Playground&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Tasks</title>
      <link>https://24x7fpga.com/sv_directory/2024_07_19_15_48_23_tasks/</link>
      <pubDate>Fri, 19 Jul 2024 15:48:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_07_19_15_48_23_tasks/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_19_15_48_23_tasks/&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;tasks&#34;&gt;Tasks&lt;/h2&gt;
&lt;p&gt;Task in SystemVerilog is a procedural block that contains a block of code that can be reused. Unlike [Functions], tasks can contain simulation time. The default port direction is &amp;ldquo;input&amp;rdquo; unless declared as other types. The default data type of the ports is of &amp;ldquo;logic&amp;rdquo; type unless specified. A task does not need to have a &amp;ldquo;begin &amp;hellip; end&amp;rdquo; statement.&lt;/p&gt;
&lt;h4 id=&#34;syntax&#34;&gt;Syntax&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;task&lt;/span&gt; task_name (in1, in2, in3, &lt;span style=&#34;color:#66d9ef&#34;&gt;output&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;logic&lt;/span&gt; out1);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// execute the code
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;endtask&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;example-code-task&#34;&gt;Example Code: &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_19_15_48_23_tasks/&#34;&gt;Task&lt;/a&gt;&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; task_ex;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;logic&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] data;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;logic&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] arry[&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;task&lt;/span&gt; incr([&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] in, &lt;span style=&#34;color:#66d9ef&#34;&gt;output&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;logic&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] out);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    out &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; in &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;endtask&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;initial&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--------- Task: Increment ---------&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;//$display(&amp;#34;data = %0d&amp;#34;, data);
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    arry[&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; data;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;15&lt;/span&gt;; i&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;)&lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      incr(arry[i], arry[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;data = %0d&amp;#34;&lt;/span&gt;, arry[i&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      #&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;endmodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://www.edaplayground.com/x/SBh6&#34;&gt;Execute the code in EDA Playground&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Break and Continue</title>
      <link>https://24x7fpga.com/sv_directory/2024_07_19_15_18_41_break_and_continue/</link>
      <pubDate>Fri, 19 Jul 2024 15:18:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_07_19_15_18_41_break_and_continue/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;break-and-continue&#34;&gt;Break and Continue&lt;/h2&gt;
&lt;p&gt;Break and continue in SytemVerilog is used to control the loops. When a &amp;ldquo;break&amp;rdquo; statement is encounted, the loop is terminated and control moves to outside of the loop. Whereas, when a &amp;ldquo;continue&amp;rdquo; statement is encounted, the consecutive blocks of code is skipped and the control is moved to the next loop iteration value.&lt;/p&gt;
&lt;h4 id=&#34;example-code-break-and-continue&#34;&gt;Example Code: Break and Continue&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; break_and_continue;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;initial&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;---------- Even Number ----------&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;forever&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(i &lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%0d is an Even Number&amp;#34;&lt;/span&gt;, i);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#66d9ef&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      #&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;endmodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://www.edaplayground.com/x/JTaV&#34;&gt;Execute the code in EDA Playground&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Repeat and Forever</title>
      <link>https://24x7fpga.com/sv_directory/2024_07_19_14_46_31_repeat_and_forever/</link>
      <pubDate>Fri, 19 Jul 2024 14:46:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_07_19_14_46_31_repeat_and_forever/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/SystemVerilog_Verification&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;repeat-and-forever-loops&#34;&gt;Repeat and Forever Loops&lt;/h2&gt;
&lt;p&gt;The &amp;ldquo;repeat&amp;rdquo; and &amp;ldquo;forever&amp;rdquo; loops are another looping constructs available constructs in SystemVerilog, to execute a loop of code for a specific number of times or indefinitely. These loops are especially useful in testbenches and design verification when you need controlled or infinite iterations.&lt;/p&gt;
&lt;h3 id=&#34;repeat&#34;&gt;Repeat&lt;/h3&gt;
&lt;p&gt;The repeat loop executes a block of code a specified number of times. This loop is handy when you know the exact number of iterations required.&lt;/p&gt;</description>
    </item>
    <item>
      <title>While and Do While Loops</title>
      <link>https://24x7fpga.com/sv_directory/2024_07_19_14_21_47_while_and_do_while_loops/</link>
      <pubDate>Fri, 19 Jul 2024 14:21:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_07_19_14_21_47_while_and_do_while_loops/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/SystemVerilog_Verification/tree/main/sv_verification&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;while-and-do-while&#34;&gt;While and Do While&lt;/h2&gt;
&lt;p&gt;While and do while loops are used for iterative control structures that execute a block of code multiple times based on a condition. These loops are particularly useful when the number of iterations is not known beforehand and depends on the evaluation of the loop condition.&lt;/p&gt;
&lt;h3 id=&#34;while-loop&#34;&gt;While Loop&lt;/h3&gt;
&lt;p&gt;The &amp;ldquo;while&amp;rdquo; loop executes a block code until the specified condition is true. The condition is evaluated before each iteration.&lt;/p&gt;</description>
    </item>
    <item>
      <title>For and Foreach Loops</title>
      <link>https://24x7fpga.com/sv_directory/2024_07_19_12_40_49_for_and_foreach_loops/</link>
      <pubDate>Fri, 19 Jul 2024 12:40:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_07_19_12_40_49_for_and_foreach_loops/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/SystemVerilog_Verification/tree/main/sv_verification&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;for-and-foreach-loops&#34;&gt;For and Foreach Loops&lt;/h2&gt;
&lt;p&gt;Loops are essential constructs to repeat a block of code for a specified amount of time. SystemVerilog provides two constructs to itreate over a range of elements and they are &amp;ldquo;for&amp;rdquo; loop and &amp;ldquo;foreach&amp;rdquo; loop.&lt;/p&gt;
&lt;h3 id=&#34;for-loop&#34;&gt;For Loop&lt;/h3&gt;
&lt;p&gt;Similar to other programming languages, the &amp;ldquo;for&amp;rdquo; loop in SystemVerilog repeats a block of code for a specified number of times. Ideal for controlled, indexed iterations where the number of iterations is known beforehand.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mod-N Counter</title>
      <link>https://24x7fpga.com/rtl_directory/2024_07_18_23_30_22_mod_n_counter/</link>
      <pubDate>Thu, 18 Jul 2024 23:30:00 -0400</pubDate>
      <guid>https://24x7fpga.com/rtl_directory/2024_07_18_23_30_22_mod_n_counter/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/RTL/tree/master/rtl_designs/mod_cntr&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/rtl_directory/2024_06_05_00_21_53_rtl_design_directory/&#34;&gt;RTL Design Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;mod-n-counter-an-overview&#34;&gt;Mod-N Counter: An Overview&lt;/h2&gt;
&lt;p&gt;A modulo-N counter (Mod-N) is counter that counts from 0 to N-1 and then wraps back to 0. This type of counter is useful in [Frequency Divider], timers and state machines. The number of flop-flop required to calculate a mod-N counter is ceil(log2(N)). Forexample: for a mod 10 counter the number of flip-flop required is 4 (ceil(log2(10))).&lt;/p&gt;
&lt;h4 id=&#34;verilog-code-mod-n-counter&#34;&gt;Verilog Code: Mod-N Counter&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; mod_cntr #(&lt;span style=&#34;color:#66d9ef&#34;&gt;parameter&lt;/span&gt; N &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;)(&lt;span style=&#34;color:#75715e&#34;&gt;/*AUTOARG*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// Outputs
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   mod_cntr,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// Inputs
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   clk, rst
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   );
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// Outputs
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;output&lt;/span&gt; [N&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] mod_cntr;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;// Inputs
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt;	  clk;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;input&lt;/span&gt;	  rst;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;logic&lt;/span&gt; [$clog2(N)&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] cntr_reg, cntr_nxt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;/*AUTOREG*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#75715e&#34;&gt;/*AUTOWIRE*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;always_ff&lt;/span&gt;@(&lt;span style=&#34;color:#66d9ef&#34;&gt;posedge&lt;/span&gt; clk)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt;(rst)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       cntr_reg &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       cntr_reg &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; cntr_nxt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;always_comb&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     cntr_nxt &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (cntr_reg &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; N&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; cntr_reg &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;assign&lt;/span&gt; mod_cntr &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; cntr_reg;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;endmodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Code Converter</title>
      <link>https://24x7fpga.com/rtl_directory/2024_07_18_21_58_46_code_converter/</link>
      <pubDate>Thu, 18 Jul 2024 21:58:00 -0400</pubDate>
      <guid>https://24x7fpga.com/rtl_directory/2024_07_18_21_58_46_code_converter/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/RTL/tree/master/rtl_designs/numConv&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/rtl_directory/2024_06_05_00_21_53_rtl_design_directory/&#34;&gt;RTL Design Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;code-converter-binary-to-from-gray-code&#34;&gt;Code Converter: Binary to/from Gray Code&lt;/h2&gt;
&lt;p&gt;Code converters are digital circuits that convert data from one form of binary representation to another. The two most important code converts are binary to gray and gray to binary. This converters are crucial digital components in designing [Aysnchronous FIFO].&lt;/p&gt;
&lt;h3 id=&#34;binary-code&#34;&gt;Binary Code&lt;/h3&gt;
&lt;p&gt;Binary code is a data representation system using only two states, zero (0) and one (1). Each digit is represented by the power of 2 with the starting bit as 2^0 and 2^1 and so on. Binary code is basic is the fundamental numerical representation in computer systems.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Credit-Based Flow Control</title>
      <link>https://24x7fpga.com/article/2024_07_17_09_17_26_credit_based_flow_control/</link>
      <pubDate>Wed, 17 Jul 2024 09:17:00 -0400</pubDate>
      <guid>https://24x7fpga.com/article/2024_07_17_09_17_26_credit_based_flow_control/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://verilog-meetup.com/2025/02/11/credit-based-flow-control/&#34;&gt;Published Article&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Flow control is a crucial synchronization technique for data transmission. It ensures the efficient flow of data between the transmitter and the receiver by maintaining a balance between the data production rate of the sender and the data consumption rate of the receiver. The data that is being transmitted is buffered to maintain the balance between the transmitter and the receiver. The control mechanism holds the intermediate data in the buffer until the receiver is ready to process the data. The most commonly implemented control mechanism in hardware is &amp;ldquo;Valid/Ready Handshake Protocol&amp;rdquo;, where the sender asserts a &amp;ldquo;valid&amp;rdquo; signal when the data is ready to be transmitted, the receiver asserts a &amp;ldquo;ready&amp;rdquo; signal when it is ready to receive data, data transfer occurs only when both valid and ready signals are asserted. This mechanism was studied in detail in a pipeline design example in &lt;a href=&#34;https://24x7fpga.com/article/2024_06_18_16_45_29_a_case_study_on_effective_pipeline_design_in_digital_systems/&#34;&gt;A Case Study on Effective Pipeline Design in Digital Systems&lt;/a&gt;. Here, we will look at a flow control mechanism that is mostly implemented in Network-on-Chips (NoCs) called credit-based flow control.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Up/Down Counter</title>
      <link>https://24x7fpga.com/rtl_directory/2024_07_16_22_30_28_up_down_counter/</link>
      <pubDate>Tue, 16 Jul 2024 22:30:00 -0400</pubDate>
      <guid>https://24x7fpga.com/rtl_directory/2024_07_16_22_30_28_up_down_counter/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/RTL/tree/master/rtl_designs/up_down_cntr&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/rtl_directory/2024_06_05_00_21_53_rtl_design_directory/&#34;&gt;RTL Design Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;up-down-counter-an-overview&#34;&gt;Up/Down Counter: An Overview&lt;/h2&gt;
&lt;p&gt;An up/down counter, also known as a bidirectional counter, is a sequential digital circuit that can increment(count up) of decrement(count down) its values. The control signal dictates the direction of the counter. These counters are widely used in digital design for counting purposes such as in frequency division, event counting, etc.&lt;/p&gt;
&lt;h3 id=&#34;applications&#34;&gt;Applications&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Digital Clocks: To count seconds, minutes, and hours.&lt;/li&gt;
&lt;li&gt;Frequency Dividers: To divide the frequency of a clock signal.&lt;/li&gt;
&lt;li&gt;Event Counters: To count occurrences of events in a digital system.&lt;/li&gt;
&lt;li&gt;Position Encoders: In robotics to keep track of position.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;design-4-bit-up-down-counter&#34;&gt;Design: 4-bit Up/Down Counter&lt;/h3&gt;
&lt;p&gt;A 4-bit binary up/down counter counts from 0 (0000 in binary) to 15 (1111 in binary). When in up-counting mode, the counter increases its value by 1 with each clock pulse. Starting from 0000, it counts up to 0001, 0010, 0011, and so on, until it reaches 1111. After reaching 1111, the next increment will cause the counter to wrap around and start again from 0000. Similarly, when in down-counting mode, the counter decreases its value by 1 with each clock pulse. Starting from 1111, it counts down to 1110, 1101, 1100, and so on, until it reaches 0000. After reaching 0000, the next decrement will cause the counter to wrap around and start again from 1111. A control signal (often labeled as UP/DOWN) determines the counting direction. When the control signal is high (1), the counter operates in up-counting mode. When the control signal is low (0), the counter operates in down-counting mode.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Universal Shift Register</title>
      <link>https://24x7fpga.com/rtl_directory/2024_07_10_20_30_35_universal_shift_register/</link>
      <pubDate>Wed, 10 Jul 2024 20:30:00 -0400</pubDate>
      <guid>https://24x7fpga.com/rtl_directory/2024_07_10_20_30_35_universal_shift_register/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/RTL/tree/master/rtl_designs/univ_shift_reg&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/rtl_directory/2024_06_05_00_21_53_rtl_design_directory/&#34;&gt;RTL Design Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;universal-shift-register-an-overview&#34;&gt;Universal Shift Register: An Overview&lt;/h2&gt;
&lt;p&gt;A universal shift register is a digital component that performs more than one data operation. It combines the functionalities of several types of shift registers into one, allowing for greater flexibility in data handling.&lt;/p&gt;
&lt;h3 id=&#34;design-4-bit-universal-shift-register&#34;&gt;Design: 4-bit Universal Shift Register&lt;/h3&gt;
&lt;p&gt;The figure below shows a design of a 4-bit universal shift register. It is an extension of a &lt;a href=&#34;https://24x7fpga.com/rtl_directory/2024_07_06_19_54_50_shift_register/&#34;&gt;Shift Register&lt;/a&gt; which includes a series of &lt;a href=&#34;https://24x7fpga.com/rtl_directory/2024_06_13_12_22_45_multiplexer/&#34;&gt;Multiplexer&lt;/a&gt; which acts as switch to change the functionality of the register.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Research</title>
      <link>https://24x7fpga.com/research/2024_07_08_10_15_40_research/</link>
      <pubDate>Mon, 08 Jul 2024 10:15:00 -0400</pubDate>
      <guid>https://24x7fpga.com/research/2024_07_08_10_15_40_research/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://etd.ohiolink.edu/acprod/odb_etd/etd/r/1501/10?clear=10&amp;amp;p10_accession_num=wright1736445262641106&#34;&gt;Dissertation&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/rfsoc_directory/2024_08_07_22_09_59_rfsoc/&#34;&gt;RFSoC&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My doctroal research concentrates on designing a wideband digital receiver system to receive and process the data for accurate multiple signal detection. &lt;a href=&#34;https://en.wikipedia.org/wiki/Fast_Fourier_transform&#34;&gt;Fast Fourier transform (FFT)&lt;/a&gt; is a widely used digital signal processing technique to detect signals in a bandwidth. However, there are some limitations when using the FFT algorithm for signal detection&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The number of fixed-length samples used by the FFT algorithm determines the frequency resolution. The number of samples from the input signal must be increased to increase the frequency resolution.&lt;/li&gt;
&lt;li&gt;Increasing the number of samples for FFT calculations may increase the frequency resolution but increases the complexity of the algorithm.&lt;/li&gt;
&lt;li&gt;Signal detection becomes much more difficult in the presence of noise and interference.&lt;/li&gt;
&lt;li&gt;Since the FFT algorithm assumes that the fixed-length samples are periodic, in reality, the starting and ending position of fixed lengths of data is not the same, making the signal non-periodic, which leads to spectral leakage and false signal detection in the presence of noise.&lt;/li&gt;
&lt;li&gt;Limited hardware resource that provides maximum accuracy for signal detection poses a significant design challenge to the engineer.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The research provides a hardware efficient algorithm to implement the FFT technique for accurate signal detection&lt;/p&gt;</description>
    </item>
    <item>
      <title>Shift Register</title>
      <link>https://24x7fpga.com/rtl_directory/2024_07_06_19_54_50_shift_register/</link>
      <pubDate>Sat, 06 Jul 2024 19:54:00 -0400</pubDate>
      <guid>https://24x7fpga.com/rtl_directory/2024_07_06_19_54_50_shift_register/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/RTL/tree/master/rtl_designs/shift_register&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/rtl_directory/2024_06_05_00_21_53_rtl_design_directory/&#34;&gt;RTL Design Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;shift-register-an-overview&#34;&gt;Shift Register: An Overview&lt;/h2&gt;
&lt;p&gt;A shift register is a set of sequential registers placed in series to transfer and store data. The figure below shows a 4-bit serial shift register.&lt;/p&gt;
&lt;figure&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;https://24x7fpga.com/ox-hugo/shift_register.png&#34;/&gt; 
&lt;/figure&gt;

&lt;p&gt;The waveform below shows the data being shifted from flip-flop 1 to 4 on the rising edge of the clock.&lt;/p&gt;
&lt;figure class=&#34;center !important&#34;&gt;
    &lt;img loading=&#34;lazy&#34; src=&#34;https://24x7fpga.com/ox-hugo/shift_register_wave.png&#34; width=&#34;500px&#34;/&gt; 
&lt;/figure&gt;

&lt;h3 id=&#34;applications&#34;&gt;Applications&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Shift registers are typically used to collect and transfer data for various applications.  They are also used for data conversion, the types of data converters are listed below:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Register</title>
      <link>https://24x7fpga.com/rtl_directory/2024_07_06_19_23_36_register/</link>
      <pubDate>Sat, 06 Jul 2024 19:23:00 -0400</pubDate>
      <guid>https://24x7fpga.com/rtl_directory/2024_07_06_19_23_36_register/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/RTL/tree/master/rtl_designs/register&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/rtl_directory/2024_06_05_00_21_53_rtl_design_directory/&#34;&gt;RTL Design Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;register-an-overview&#34;&gt;Register: An Overview&lt;/h2&gt;
&lt;p&gt;A register in digital design is a fast storage sequential circuit that can hold data temporarily. A widely used register is D Flip-FLop. A D Flip-Flop is an edge-triggered circuit that combines a pair of latches to store one bit.&lt;/p&gt;
&lt;h3 id=&#34;advantages-of-registers&#34;&gt;Advantages of Registers&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Registers provide fast access to data compared to main memory.&lt;/li&gt;
&lt;li&gt;Ideal for temporary storage during data processing.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;desgin-d-flip-flop&#34;&gt;Desgin: D Flip-Flop&lt;/h3&gt;
&lt;p&gt;A D Flip-Flop is an edge-trigger register, either positive edge-triggered, negative edge-triggered, or dual edge-triggered. For the purpose of discussion let&amp;rsquo;s consider a positive edge-triggered :flip-flop.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Adder-Subtractor</title>
      <link>https://24x7fpga.com/rtl_directory/2024_07_06_16_50_01_adder_subtractor/</link>
      <pubDate>Sat, 06 Jul 2024 16:50:00 -0400</pubDate>
      <guid>https://24x7fpga.com/rtl_directory/2024_07_06_16_50_01_adder_subtractor/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/RTL/tree/master/rtl_designs/adder_subtractor&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/rtl_directory/2024_06_05_00_21_53_rtl_design_directory/&#34;&gt;RTL Design Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;adder-subtractor-an-overview&#34;&gt;Adder-Subtractor: An Overview&lt;/h2&gt;
&lt;p&gt;An adder-subtractor is a combinational digital circuit that can perform the operation of an adder and subtractor based on the control signal. It is an essential component in arithmetic logic units (ALUs) in microprocessors and digital signal processors.&lt;/p&gt;
&lt;h3 id=&#34;applications-of-adder-subtractor&#34;&gt;Applications of Adder-Subtractor&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;CPUs, microcontrollers, and digital signal processors implement adder subtractors for arithmetic operations.&lt;/li&gt;
&lt;li&gt;Computer graphics make use of adder-subtractors blocks for calculating coordinates and pixel values.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;components-of-adder-subtractor&#34;&gt;Components of Adder-Subtractor&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Binary Adder: A simple &lt;a href=&#34;https://24x7fpga.com/rtl_directory/2024_06_08_11_32_42_full_adder/&#34;&gt;Full Adder&lt;/a&gt; with three inputs, two significant bits and one carry-in bit, and two outputs sum and carry-out.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Comparator</title>
      <link>https://24x7fpga.com/rtl_directory/2024_07_06_15_54_47_comparator/</link>
      <pubDate>Sat, 06 Jul 2024 15:54:00 -0400</pubDate>
      <guid>https://24x7fpga.com/rtl_directory/2024_07_06_15_54_47_comparator/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/RTL/tree/master/rtl_designs/comparator&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/rtl_directory/2024_06_05_00_21_53_rtl_design_directory/&#34;&gt;RTL Design Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;comparator-an-overview&#34;&gt;Comparator: An Overview&lt;/h2&gt;
&lt;p&gt;A comparator is a fundamental building block in digital design that compares two binary numbers. Comparators can be categorized based on their use and functionality.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Equality Comparator: it compares the two binary numbers to up a true bit or high when all the binary bits are identical and false or low when the bits are not identical.&lt;/li&gt;
&lt;li&gt;Magnitude Comparator: has three functionality, to determine the relationship between the two binary numbers that are being compared. The three functionalities are greater than, less than, and equal to.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;applications-of-comparators&#34;&gt;Applications of Comparators&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Comparators are used in sorting algorithms to compare and order numbers.&lt;/li&gt;
&lt;li&gt;In signed subtractions, it is necessary to compare the magnitudes to perform the operation.&lt;/li&gt;
&lt;li&gt;Many control systems and processors use comparators to make decisions based on numerical comparisons.&lt;/li&gt;
&lt;li&gt;Extremely helpful in looping statements.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;design-4-bit-comparator&#34;&gt;Design: 4-bit Comparator&lt;/h3&gt;
&lt;p&gt;A 4-bit comparator consists of two inputs each of four bits and three outputs, one for each comparison. Typically, a magnitude comparator is used widely in many digital system applications. Verilog provides three operators for the three-magnitude comparator operations. They are as follows:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dynamic Cast</title>
      <link>https://24x7fpga.com/sv_directory/2024_07_02_18_41_56_dynamic_cast/</link>
      <pubDate>Tue, 02 Jul 2024 18:41:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_07_02_18_41_56_dynamic_cast/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/SystemVerilog_Verification/blob/main/sv_verification/dynamic_cast/tb_dynamic_cast.sv&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;dynamic-cast&#34;&gt;Dynamic Cast&lt;/h2&gt;
&lt;p&gt;Casting refers to conversion of a variable to one data type to another data type. SystemVerilog provides two types of casting,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_02_18_32_19_static_cast/&#34;&gt;Static Cast&lt;/a&gt;ing&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_02_18_41_56_dynamic_cast/&#34;&gt;Dynamic Cast&lt;/a&gt;ing&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;dynamic-casting&#34;&gt;Dynamic Casting&lt;/h3&gt;
&lt;p&gt;Dynamic casting in SystemVerilog allows you to safely convert a handle of one class type to another class type at runtime, ensuring the cast is valid and the object is of the target type. The dynamic cast, $cast, allows you to check for out-of-bounds values. Use dynamic cast when converting from a type with a large number of values than the destination, such as int to an enumerated variables.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Static Cast</title>
      <link>https://24x7fpga.com/sv_directory/2024_07_02_18_32_19_static_cast/</link>
      <pubDate>Tue, 02 Jul 2024 18:32:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_07_02_18_32_19_static_cast/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/SystemVerilog_Verification/blob/main/sv_verification/type_enum/tb_type_enum.sv&#34;&gt;Source&lt;/a&gt;  &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;static-cast&#34;&gt;Static Cast&lt;/h2&gt;
&lt;p&gt;Casting refers to conversion of a variable to one data type to another data type. SystemVerilog provides two types of casting,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_02_18_32_19_static_cast/&#34;&gt;Static Cast&lt;/a&gt;ing&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_02_18_41_56_dynamic_cast/&#34;&gt;Dynamic Cast&lt;/a&gt;ing&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;static-casting&#34;&gt;Static Casting&lt;/h3&gt;
&lt;p&gt;Static casting converts one data type to another compartible datatypes, as the name suggest, the conversion data type is fixed. The cast (&amp;rsquo;) operator should be placed before the data along with the intended data type.&lt;/p&gt;
&lt;h4 id=&#34;example&#34;&gt;Example&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; static_conv;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;  i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;75&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;real&lt;/span&gt; r &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;13.75&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;initial&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;begin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;  m &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; &amp;#39;(r));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;real&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;real&lt;/span&gt; &amp;#39;(i)) &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; r;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;multiplication result in int  = %0f&amp;#34;&lt;/span&gt;, m);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    $display(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;multiplication result in real = %0f&amp;#34;&lt;/span&gt;, k);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;end&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;endmodule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://www.edaplayground.com/x/WTEv&#34;&gt;Execute the code in EDA Playground&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Structures</title>
      <link>https://24x7fpga.com/sv_directory/2024_07_02_16_54_49_structures/</link>
      <pubDate>Tue, 02 Jul 2024 16:54:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_07_02_16_54_49_structures/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;structure&#34;&gt;Structure&lt;/h2&gt;
&lt;p&gt;One of the biggest limitations of Verilog is the lack of data structures. In SystemVerilog, you can create a structure using the struct statement. A structure is a collection of data that can be synthesized.&lt;/p&gt;
&lt;p&gt;Example of struct:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {&lt;span style=&#34;color:#66d9ef&#34;&gt;logic&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] data_a, data_b, data_c;} data_s;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;data_s in_data;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;NOTE: By default a structure is unpacked.&lt;/p&gt;
&lt;h3 id=&#34;typedef-for-struct&#34;&gt;Typedef for Struct&lt;/h3&gt;
&lt;p&gt;To create multiple structure variables it is necessary to use typedef data type.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Enumeration</title>
      <link>https://24x7fpga.com/sv_directory/2024_07_02_15_05_30_enumeration/</link>
      <pubDate>Tue, 02 Jul 2024 15:05:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_07_02_15_05_30_enumeration/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/SystemVerilog_Verification/blob/main/sv_verification/type_enum/tb_type_enum.sv&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;enumeration&#34;&gt;Enumeration&lt;/h2&gt;
&lt;p&gt;In Verilog, it is possible to declare user-defined types using a define macro, shown below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;`define TYPE1 8
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;`define TYPE2 32
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This does not create a new type but just performance text substitution. In SystemVerilog, a new type can be created with the following code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-verilog&#34; data-lang=&#34;verilog&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;typedef&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;logic&lt;/span&gt; [Size&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;] VAR_T;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;VAR_T var1, var2;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The typedef and parameter statements can be put in a package so they can be shared across the design and testbench. A good use for a user-defined type is an associative array, which must be declared with an index.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Array Methods</title>
      <link>https://24x7fpga.com/sv_directory/2024_07_02_09_48_08_array_methods/</link>
      <pubDate>Tue, 02 Jul 2024 09:48:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_07_02_09_48_08_array_methods/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;array-methods&#34;&gt;Array Methods&lt;/h2&gt;
&lt;p&gt;Array methods are generic manipulation methods that apply to the entire array rather than iterating to every element in the array.&lt;/p&gt;
&lt;h3 id=&#34;basic-array-operations&#34;&gt;Basic Array Operations&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Copy: an array can be copied completely to another array without using a loop statement.&lt;/li&gt;
&lt;li&gt;Compare: two arrays can be compared for equality and inequality.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Keep in mind that two arrays that are being compared or copied must be of the same base type and size.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Associative Arrays</title>
      <link>https://24x7fpga.com/sv_directory/2024_07_02_00_18_56_associative_arrays/</link>
      <pubDate>Tue, 02 Jul 2024 00:18:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_07_02_00_18_56_associative_arrays/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/SystemVerilog_Verification/blob/main/sv_verification/associative_arrays/tb_associative_arrays.sv&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;associative-arrays&#34;&gt;Associative Arrays&lt;/h2&gt;
&lt;p&gt;Associative arrays in SystemVerilog allow you to index arrays with arbitrary data types. An associative array can be stored by the simulator as a tree or a hash table. An associative array is declared with a data type in square brackets. Only the elements that are explicitly assigned are stored, making it memory-efficient for sparse arrays.&lt;/p&gt;
&lt;p&gt;Example of associative arrays in SV is shown below:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Queues</title>
      <link>https://24x7fpga.com/sv_directory/2024_07_01_23_35_47_queues/</link>
      <pubDate>Mon, 01 Jul 2024 23:35:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_07_01_23_35_47_queues/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/SystemVerilog_Verification/blob/main/sv_verification/queues/tb_queues.sv&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;queues&#34;&gt;Queues&lt;/h2&gt;
&lt;p&gt;Queue is a new data type introduced in SystemVerilog that combines the best of a linked list and an array.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Like a linked list, elements can be added and removed anywhere in the queue, without performance degradation when using a dynamic array that has to allocate a new array and copy the entire contents.&lt;/li&gt;
&lt;li&gt;Like an array, any element in the queue can be directly accessed with the help of the index, without the linked list&amp;rsquo;s overhead of stepping through the preceding element.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A queue is declared with the word subscript containing a dollar sign &amp;ldquo;[$]&amp;rdquo;. The elements in the queue are numbered from 0 to $. Initializing a queue is different for arrays as the initial apostrophe is not required and the elements must be declared inside the curly brackets. SystemVerilog allocates extra space for a queue so that you don&amp;rsquo;t run out of space when filling up a queue. This way a queue can grow and shrink without any performance penalty of a dynamic array.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dynamic Arrays</title>
      <link>https://24x7fpga.com/sv_directory/2024_07_01_15_56_35_dynamic_arrays/</link>
      <pubDate>Mon, 01 Jul 2024 15:56:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_07_01_15_56_35_dynamic_arrays/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/SystemVerilog_Verification/blob/main/sv_verification/dynamic_arrays/tb_dynamic_arrays.sv&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;dymanic-arrays&#34;&gt;Dymanic Arrays&lt;/h2&gt;
&lt;p&gt;Dynamic arrays are arrays that do not have their size set during the compile time. They can be allocated and resized during simulation based on the design requirement so that the simulation cosumes minimal amount of memory. A dynamic array can be declare with empty word subscripts &amp;ldquo;[ ]&amp;rdquo;. The array is initially empty and must be called with the &amp;ldquo;new[ ]&amp;rdquo; constuctor to  allocate space, passing in the number of entries in the square brackets.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Packed and Unpacked Array</title>
      <link>https://24x7fpga.com/sv_directory/2024_06_29_23_39_49_packed_and_unpacked_array/</link>
      <pubDate>Sat, 29 Jun 2024 23:39:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_06_29_23_39_49_packed_and_unpacked_array/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/SystemVerilog_Verification/blob/main/sv_verification/packed_and_unpacked/tb_packed_and_unpacked.sv&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;packed-and-unpacked-array&#34;&gt;Packed and Unpacked Array&lt;/h2&gt;
&lt;p&gt;Packed and unpacked arrays are differentiated based on the way the arrays are stored in the memory. Generally, simulators store each element on a 32-bit word boundary. In a packed array, the elements are stored in contiguous memory locations whereas in an unpacked array, the elements are not stored in contiguous memory locations.&lt;/p&gt;
&lt;h3 id=&#34;packed-array&#34;&gt;Packed Array&lt;/h3&gt;
&lt;p&gt;A packed array can be declared by declaring the dimension before the identifier name shown below:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Fixed-Size Arrays</title>
      <link>https://24x7fpga.com/sv_directory/2024_06_29_23_25_03_fixed_size_arrays/</link>
      <pubDate>Sat, 29 Jun 2024 23:25:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_06_29_23_25_03_fixed_size_arrays/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;fixed-size-arrays&#34;&gt;Fixed-Size Arrays&lt;/h2&gt;
&lt;p&gt;An array is a collection of elements stored sequentially. An array in Verilog should be declared with upper and lower bounds. The lower bound in most of the arrays is zero. Fixed-size arrays have constant size and do not change during run time. The array size is set at compile time.&lt;/p&gt;
&lt;h3 id=&#34;single-dimension-array&#34;&gt;Single Dimension Array&lt;/h3&gt;
&lt;p&gt;There are two ways in SystemVerilog to declare single-dimension arrays which are shown below:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Redo In Vim</title>
      <link>https://24x7fpga.com/vim_directory/2024_06_28_15_38_01_redo_in_vim/</link>
      <pubDate>Fri, 28 Jun 2024 15:38:00 -0400</pubDate>
      <guid>https://24x7fpga.com/vim_directory/2024_06_28_15_38_01_redo_in_vim/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=d975TRmAfv4&#34;&gt;Reference&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;redo-in-vim&#34;&gt;Redo in Vim&lt;/h2&gt;
&lt;p&gt;Come out of the insert mode by pressing &amp;ldquo;Esc&amp;rdquo; and press &amp;ldquo;ctrl+shift+r&amp;rdquo; to redo.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Undo In Vim</title>
      <link>https://24x7fpga.com/vim_directory/2024_06_28_15_35_07_undo_in_vim/</link>
      <pubDate>Fri, 28 Jun 2024 15:35:00 -0400</pubDate>
      <guid>https://24x7fpga.com/vim_directory/2024_06_28_15_35_07_undo_in_vim/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=d975TRmAfv4&#34;&gt;Reference&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;undo&#34;&gt;Undo&lt;/h2&gt;
&lt;p&gt;Come out from the insert mode by pressing &amp;ldquo;Esc&amp;rdquo; and press &amp;lsquo;u&amp;rsquo; to undo.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Copy A Word In A Line</title>
      <link>https://24x7fpga.com/vim_directory/2024_06_28_15_15_48_copy_a_word_in_a_line/</link>
      <pubDate>Fri, 28 Jun 2024 15:15:00 -0400</pubDate>
      <guid>https://24x7fpga.com/vim_directory/2024_06_28_15_15_48_copy_a_word_in_a_line/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=eEQEwq_rHIc&#34;&gt;Reference&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;copying-a-word&#34;&gt;Copying a Word&lt;/h2&gt;
&lt;p&gt;To copy a word in a line you must go into visual mode in vim. You press &amp;lsquo;v&amp;rsquo; to go into visual mode.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;First go to a the word that you want to copy using &amp;lsquo;w&amp;rsquo;. More instructin can be found @ &lt;a href=&#34;https://24x7fpga.com/vim_directory/2024_06_28_15_10_34_move_the_cursor_by_one_word/&#34;&gt;Move The Cursor by One Word&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Press &amp;lsquo;v&amp;rsquo; to get into visual mode.&lt;/li&gt;
&lt;li&gt;Use &amp;lsquo;h, j, k, l&amp;rsquo; to selected the word or a sentence.&lt;/li&gt;
&lt;li&gt;Press &amp;lsquo;y&amp;rsquo; to yank or copy the content that is selected.&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    <item>
      <title>Move The Cursor by One Word</title>
      <link>https://24x7fpga.com/vim_directory/2024_06_28_15_10_34_move_the_cursor_by_one_word/</link>
      <pubDate>Fri, 28 Jun 2024 15:10:00 -0400</pubDate>
      <guid>https://24x7fpga.com/vim_directory/2024_06_28_15_10_34_move_the_cursor_by_one_word/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=eEQEwq_rHIc&#34;&gt;Reference&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;jump-the-cursor-by-one-word&#34;&gt;Jump the cursor by One Word&lt;/h2&gt;
&lt;p&gt;To move the cursor location to the next word in vim use lowercase &amp;lsquo;w&amp;rsquo;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;To the begining of the line using the line number eg. :57.&lt;/li&gt;
&lt;li&gt;Press &amp;lsquo;w&amp;rsquo; the cursor will move to the next word.&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    <item>
      <title>Logic Type</title>
      <link>https://24x7fpga.com/sv_directory/2024_06_28_14_48_33_logic_type/</link>
      <pubDate>Fri, 28 Jun 2024 14:48:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_06_28_14_48_33_logic_type/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/&#34;&gt;SV Verification Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;logic-type&#34;&gt;Logic Type&lt;/h2&gt;
&lt;h3 id=&#34;data-types&#34;&gt;Data Types&lt;/h3&gt;
&lt;p&gt;SystemVerilog includes all the data types that are available with Verilog and add many new data types to help both hardware design engineers and verification engineers. Below is a table showing an extensive list of data types availabe in SystemVerilog.&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;Language&lt;/th&gt;
          &lt;th&gt;Data Type&lt;/th&gt;
          &lt;th&gt;State Type&lt;/th&gt;
          &lt;th&gt;No. of Bits&lt;/th&gt;
          &lt;th&gt;Signed/Unsigned&lt;/th&gt;
          &lt;th&gt;C Equivalent&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;SystemVerilog/Verilog&lt;/td&gt;
          &lt;td&gt;Wire&lt;/td&gt;
          &lt;td&gt;4&lt;/td&gt;
          &lt;td&gt;&amp;gt;=1&lt;/td&gt;
          &lt;td&gt;Unsigned&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;SystemVerilog/Verilog&lt;/td&gt;
          &lt;td&gt;Reg&lt;/td&gt;
          &lt;td&gt;4&lt;/td&gt;
          &lt;td&gt;&amp;gt;=1&lt;/td&gt;
          &lt;td&gt;Unsigned&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;SystemVerilog/Verilog&lt;/td&gt;
          &lt;td&gt;Interger&lt;/td&gt;
          &lt;td&gt;4&lt;/td&gt;
          &lt;td&gt;32&lt;/td&gt;
          &lt;td&gt;Signed&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;SystemVerilog/Verilog&lt;/td&gt;
          &lt;td&gt;Real&lt;/td&gt;
          &lt;td&gt;2&lt;/td&gt;
          &lt;td&gt;&lt;/td&gt;
          &lt;td&gt;Double Precision Floating point&lt;/td&gt;
          &lt;td&gt;Double&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;SystemVerilog/Verilog&lt;/td&gt;
          &lt;td&gt;Time&lt;/td&gt;
          &lt;td&gt;4&lt;/td&gt;
          &lt;td&gt;64&lt;/td&gt;
          &lt;td&gt;Unsigned&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;SystemVerilog&lt;/td&gt;
          &lt;td&gt;Logic&lt;/td&gt;
          &lt;td&gt;4&lt;/td&gt;
          &lt;td&gt;&amp;gt;=1&lt;/td&gt;
          &lt;td&gt;unsigned&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;SystemVerilog&lt;/td&gt;
          &lt;td&gt;Bit&lt;/td&gt;
          &lt;td&gt;2&lt;/td&gt;
          &lt;td&gt;&amp;gt;=1&lt;/td&gt;
          &lt;td&gt;unsigned&lt;/td&gt;
          &lt;td&gt;-&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;SystemVerilog&lt;/td&gt;
          &lt;td&gt;Byte&lt;/td&gt;
          &lt;td&gt;2&lt;/td&gt;
          &lt;td&gt;8&lt;/td&gt;
          &lt;td&gt;Signed&lt;/td&gt;
          &lt;td&gt;Char&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;SystemVerilog&lt;/td&gt;
          &lt;td&gt;Int&lt;/td&gt;
          &lt;td&gt;2&lt;/td&gt;
          &lt;td&gt;32&lt;/td&gt;
          &lt;td&gt;Signed&lt;/td&gt;
          &lt;td&gt;Int&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;SystemVerilog&lt;/td&gt;
          &lt;td&gt;Shortint&lt;/td&gt;
          &lt;td&gt;2&lt;/td&gt;
          &lt;td&gt;16&lt;/td&gt;
          &lt;td&gt;Signed&lt;/td&gt;
          &lt;td&gt;Short Int&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;SystemVerilog&lt;/td&gt;
          &lt;td&gt;Longint&lt;/td&gt;
          &lt;td&gt;2&lt;/td&gt;
          &lt;td&gt;64&lt;/td&gt;
          &lt;td&gt;Signed&lt;/td&gt;
          &lt;td&gt;Long Int&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Note: signed variables can cause unexpected results with randomization.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SV Verification Directory</title>
      <link>https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/</link>
      <pubDate>Thu, 27 Jun 2024 16:53:00 -0400</pubDate>
      <guid>https://24x7fpga.com/sv_directory/2024_06_27_16_53_00_sv_verification_directory/</guid>
      <description>&lt;p&gt;In the rapidly evolving world of digital design, verification is paramount to ensuring that designs function correctly and efficiently. SystemVerilog, an extension of the Verilog hardware description language, has become a critical tool for verification engineers. This blog post aims to introduce SystemVerilog verification, highlighting its significance, features, and basic concepts to help you get started on your verification journey.&lt;/p&gt;
&lt;h2 id=&#34;automated-workflow-in-vivado&#34;&gt;Automated Workflow in Vivado&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_10_05_18_24_35_sv_verification_workflow_in_vivado/&#34;&gt;SV Verification Workflow in Vivado&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;layered-testbench&#34;&gt;Layered Testbench&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_10_05_21_56_25_sv_testbench_overview/&#34;&gt;SV Testbench Overview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sv-scheduling-semantics&#34;&gt;SV Scheduling Semantics&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2025_01_14_scheduling_semantics/&#34;&gt;Scheduling Semantics&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;data-types&#34;&gt;Data Types&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_28_14_48_33_logic_type/&#34;&gt;Logic Type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_29_23_25_03_fixed_size_arrays/&#34;&gt;Fixed-Size Arrays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_06_29_23_39_49_packed_and_unpacked_array/&#34;&gt;Packed and Unpacked Array&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_01_15_56_35_dynamic_arrays/&#34;&gt;Dynamic Arrays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_01_23_35_47_queues/&#34;&gt;Queues&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_02_00_18_56_associative_arrays/&#34;&gt;Associative Arrays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_02_09_48_08_array_methods/&#34;&gt;Array Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_02_15_05_30_enumeration/&#34;&gt;Enumeration&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_02_16_54_49_structures/&#34;&gt;Structures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Streaming Operator&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;type-converstion&#34;&gt;Type Converstion&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_02_18_32_19_static_cast/&#34;&gt;Static Cast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_02_18_41_56_dynamic_cast/&#34;&gt;Dynamic Cast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;flow-control&#34;&gt;Flow Control&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_19_12_40_49_for_and_foreach_loops/&#34;&gt;For and Foreach Loops&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_19_14_21_47_while_and_do_while_loops/&#34;&gt;While and Do While Loops&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_19_14_46_31_repeat_and_forever/&#34;&gt;Repeat and Forever&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_19_15_18_41_break_and_continue/&#34;&gt;Break and Continue&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;tasks-and-functions&#34;&gt;Tasks and Functions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_19_15_48_23_tasks/&#34;&gt;Tasks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_20_15_36_43_functions/&#34;&gt;Functions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;process&#34;&gt;Process&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_20_21_47_05_fork_join/&#34;&gt;Fork Join&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_20_21_58_50_fork_join_any/&#34;&gt;Fork Join Any&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_20_22_11_00_fork_join_none/&#34;&gt;Fork Join None&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_23_17_27_07_wait_fork/&#34;&gt;Wait Fork&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_23_17_27_50_disable_fork/&#34;&gt;Disable Fork&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;oop-in-sv&#34;&gt;OOP in SV&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_24_15_11_27_object_oriented_programming/&#34;&gt;Object-Oriented Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_24_16_47_44_class/&#34;&gt;Class&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_24_22_09_00_handle/&#34;&gt;Handle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_24_17_42_06_object/&#34;&gt;Object&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_25_12_36_42_method/&#34;&gt;Method&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_25_14_49_57_this_keyword/&#34;&gt;This Keyword&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_25_14_51_44_static_class_properties_and_methods/&#34;&gt;Static Class Properties and Methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_26_09_41_22_shallow_copy_and_deep_copy/&#34;&gt;Shallow Copy and Deep Copy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_29_10_30_53_four_pillars_of_oop/&#34;&gt;Four Pillars of OOP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_29_11_09_50_inheritance/&#34;&gt;Inheritance&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_29_12_16_52_super_keyword/&#34;&gt;Super Keyword&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_31_10_21_04_virtual_keyword/&#34;&gt;Virtual Keyword&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_31_10_26_49_polymorphism/&#34;&gt;Polymorphism&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_31_16_19_14_encapsulation/&#34;&gt;Encapsulation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;interprocess-communication&#34;&gt;Interprocess Communication&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_07_31_17_20_12_events/&#34;&gt;Events&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_08_06_10_48_02_mailbox/&#34;&gt;Mailbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_08_06_12_53_53_semaphore/&#34;&gt;Semaphore&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;interface&#34;&gt;Interface&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_08_08_10_27_00_interface/&#34;&gt;Interface&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_08_08_10_17_52_modport/&#34;&gt;Modport&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_08_08_13_51_50_clocking_block/&#34;&gt;Clocking Block&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;randomization&#34;&gt;Randomization&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_10_15_12_10_22_urandom_and_urandom_range/&#34;&gt;$urandom and $urandom_range&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_10_15_12_34_46_rand_and_randc/&#34;&gt;rand and randc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_10_15_12_53_31_constraint_randomization/&#34;&gt;Constraint Randomization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_10_15_15_54_33_constraint_inside_operator/&#34;&gt;Constraint: Inside Operator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_10_15_17_48_30_constraint_array_randomization/&#34;&gt;Constraint: Array Randomization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_10_16_11_12_51_constraint_bidirectional_and_conditional/&#34;&gt;Constraint: Bidirectional and Conditional&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_10_16_13_50_42_constraint_implication_and_equivalence/&#34;&gt;Constraint: Implication and Equivalence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_10_22_13_18_19_constraint_solve_before/&#34;&gt;Constraint: Solve-Before&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_10_22_14_42_44_constraint_weighted_distribution/&#34;&gt;Constraint: Weighted Distribution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_10_22_16_57_37_constraint_in_line_and_external/&#34;&gt;Constraint: In-line and External&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sv-mastery-challenges&#34;&gt;SV Mastery Challenges&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://24x7fpga.com/sv_directory/2024_11_12_18_40_22_constraint_challenges/&#34;&gt;Constraint Challenges&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;verification-examples&#34;&gt;Verification Examples&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/24x7fpga/SystemVerilog_Verification/tree/main/sv_verification/half_adder&#34;&gt;Half Adder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/24x7fpga/SystemVerilog_Verification/tree/main/sv_verification/full_adder&#34;&gt;Full Adder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/24x7fpga/SV/tree/main/sv_verification/adder_subtractor&#34;&gt;Adder Subtractor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Decoder</title>
      <link>https://24x7fpga.com/rtl_directory/2024_06_23_21_30_22_decoder/</link>
      <pubDate>Sun, 23 Jun 2024 21:30:00 -0400</pubDate>
      <guid>https://24x7fpga.com/rtl_directory/2024_06_23_21_30_22_decoder/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/RTL/tree/master/rtl_designs/decoder3_to_8&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/rtl_directory/2024_06_05_00_21_53_rtl_design_directory/&#34;&gt;RTL Design Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;decoder-an-overview&#34;&gt;Decoder: An Overview&lt;/h2&gt;
&lt;p&gt;The functionality of a decoder is the opposite of an &lt;a href=&#34;https://24x7fpga.com/rtl_directory/2024_06_23_20_40_25_encoder/&#34;&gt;Encoder&lt;/a&gt;. A decoder is a combinational circuit that converts a binary coder to a set of output signals with only one bit of the being high at any given time. It consists of N input lines and 2^N output lines.&lt;/p&gt;
&lt;h3 id=&#34;design-2-to-4-decoder&#34;&gt;Design: 2-to-4 Decoder&lt;/h3&gt;
&lt;p&gt;A 2-to-4 decoder consists of two input lines and four output lines. The truth table of the decoder is shown below:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Encoder</title>
      <link>https://24x7fpga.com/rtl_directory/2024_06_23_20_40_25_encoder/</link>
      <pubDate>Sun, 23 Jun 2024 20:40:00 -0400</pubDate>
      <guid>https://24x7fpga.com/rtl_directory/2024_06_23_20_40_25_encoder/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/RTL/tree/master/rtl_designs/encoder8_to_3&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/rtl_directory/2024_06_05_00_21_53_rtl_design_directory/&#34;&gt;RTL Design Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;encoder-an-overview&#34;&gt;Encoder: An Overview&lt;/h2&gt;
&lt;p&gt;An encoder is a digital combinational circuit that converts 2^n inputs to n outputs. It converts a set of binary inputs to binary-coded output, where only one input line is active at a given time.&lt;/p&gt;
&lt;h3 id=&#34;design-4-to-2-encoder&#34;&gt;Design: 4-to-2 Encoder&lt;/h3&gt;
&lt;p&gt;A 4-to-2 encoder, where n = 2 i.e., it consists of 2^n = 2^2 = 4 input lines named as in[3], in[2], in[1], in[0] and two output lines named as out[1] and out[0].&lt;/p&gt;</description>
    </item>
    <item>
      <title>A Case Study on Effective Pipeline Design in Digital Systems</title>
      <link>https://24x7fpga.com/article/2024_06_18_16_45_29_a_case_study_on_effective_pipeline_design_in_digital_systems/</link>
      <pubDate>Tue, 18 Jun 2024 16:45:00 -0400</pubDate>
      <guid>https://24x7fpga.com/article/2024_06_18_16_45_29_a_case_study_on_effective_pipeline_design_in_digital_systems/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://verilog-meetup.com/2024/06/20/a-case-study-on-effective-pipeline-design-in-digital-system/&#34;&gt;Published Article&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Throughput and latency are fundamental concepts in moderm digital system. Throughput refers to the time the system takes to process the data per clock cycle where latency refers to the time it takes for the data to travese from one location to another to complete an operation. High throughput and low latency are essentail for today&amp;rsquo;s fast-paced digital world. For example, higher throughput ensure smooth and uninterrupted audio and video streaming and low latency provides seamless and responsive gaming experience reducing lag. It is necessary to strike a balance between high throughput and low latency. By processing more data simultaneously, you can boost throughput, but only if the system can handle the additional load. Therefore, digital designers need to find the right balance depending on the specific requirement for the system. The two most commonly implemented statergies to improve throughput is pipeling and parallel processing.&lt;/p&gt;</description>
    </item>
    <item>
      <title>De-Multiplexer</title>
      <link>https://24x7fpga.com/rtl_directory/2024_06_14_22_07_44_de_multiplexer/</link>
      <pubDate>Fri, 14 Jun 2024 22:07:00 -0400</pubDate>
      <guid>https://24x7fpga.com/rtl_directory/2024_06_14_22_07_44_de_multiplexer/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/RTL/tree/master/rtl_designs/demux1_to_8&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/rtl_directory/2024_06_05_00_21_53_rtl_design_directory/&#34;&gt;RTL Design Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;de-multiplexer--demux--an-overview&#34;&gt;De-Multiplexer (DEMUX): An Overview&lt;/h2&gt;
&lt;p&gt;A DEMUX or data distributor is a one-to-many combinational circuit that receives inputs from a single input line and transmits the same information over one of &amp;rsquo;n&amp;rsquo; possible output lines. DEMUX transmits the same data that is received on the input to different destinations. A de-multiplexer is a 1-to-N device, where N/n is the number of outputs and with &amp;rsquo;m&amp;rsquo; select line, therefore, 2^m = n.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Multiplexer</title>
      <link>https://24x7fpga.com/rtl_directory/2024_06_13_12_22_45_multiplexer/</link>
      <pubDate>Thu, 13 Jun 2024 12:22:00 -0400</pubDate>
      <guid>https://24x7fpga.com/rtl_directory/2024_06_13_12_22_45_multiplexer/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/RTL/tree/master/rtl_designs/mux8_to_1&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/rtl_directory/2024_06_05_00_21_53_rtl_design_directory/&#34;&gt;RTL Design Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;multiplexer--mux--an-overview&#34;&gt;Multiplexer (MUX): An Overview&lt;/h2&gt;
&lt;p&gt;A multiplexer is a digital circuit that selects one input out of many inputs, hence, it is also called a data selector. It consists of 2^n inputs with n selector lines, which are used to select which input to send to the output.&lt;/p&gt;
&lt;h3 id=&#34;need-for-multiplexers&#34;&gt;Need For Multiplexers&lt;/h3&gt;
&lt;p&gt;The need for MUXs arises wherever there is a need to transmit multiple data over a shared communication channel.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Full Adder</title>
      <link>https://24x7fpga.com/rtl_directory/2024_06_08_11_32_42_full_adder/</link>
      <pubDate>Sat, 08 Jun 2024 11:32:00 -0400</pubDate>
      <guid>https://24x7fpga.com/rtl_directory/2024_06_08_11_32_42_full_adder/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/RTL/tree/master/rtl_designs/full_add&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/rtl_directory/2024_06_05_00_21_53_rtl_design_directory/&#34;&gt;RTL Design Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;full-adder&#34;&gt;Full Adder&lt;/h2&gt;
&lt;p&gt;A full adder is a basic building block of a digital circuit. Full adder requires three inputs a, b, and c(carry-in) to result in two outputs s(sum) and co(carry-out).&lt;/p&gt;
&lt;p&gt;Full adder truth table:&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;A&lt;/th&gt;
          &lt;th&gt;B&lt;/th&gt;
          &lt;th&gt;C&lt;/th&gt;
          &lt;th&gt;SUM (S)&lt;/th&gt;
          &lt;th&gt;Carry (Co)&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Boolean equation for sum and carry is :&lt;/p&gt;</description>
    </item>
    <item>
      <title>Half Adder</title>
      <link>https://24x7fpga.com/rtl_directory/2024_06_05_22_56_41_half_adder/</link>
      <pubDate>Wed, 05 Jun 2024 22:56:00 -0400</pubDate>
      <guid>https://24x7fpga.com/rtl_directory/2024_06_05_22_56_41_half_adder/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/24x7fpga/RTL/tree/master/rtl_designs/half_add&#34;&gt;Source&lt;/a&gt; &amp;ndash; &lt;a href=&#34;https://24x7fpga.com/rtl_directory/2024_06_05_00_21_53_rtl_design_directory/&#34;&gt;RTL Design Directory&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;half-adder&#34;&gt;Half Adder&lt;/h2&gt;
&lt;p&gt;Half adder is a combinational arithmetic circuit. Its functionality is to add two 1-bit binary digits to produce a sum bit and carry as the output.&lt;/p&gt;
&lt;p&gt;Half adder truth table:&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;A&lt;/th&gt;
          &lt;th&gt;B&lt;/th&gt;
          &lt;th&gt;Sum (S)&lt;/th&gt;
          &lt;th&gt;Carry (Co)&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;1&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Boolean equation for sum and carry can be written as :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sum = A xor B&lt;/li&gt;
&lt;li&gt;Carry = A and B&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Half adder can be modelled in verilog using data flow representation:&lt;/p&gt;</description>
    </item>
    <item>
      <title>RTL Design Directory</title>
      <link>https://24x7fpga.com/rtl_directory/2024_06_05_00_21_53_rtl_design_directory/</link>
      <pubDate>Wed, 05 Jun 2024 00:21:00 -0400</pubDate>
      <guid>https://24x7fpga.com/rtl_directory/2024_06_05_00_21_53_rtl_design_directory/</guid>
      <description>&lt;p&gt;Welcome to my comprehensive collection of &lt;a href=&#34;https://en.wikipedia.org/wiki/Register-transfer_level&#34;&gt;RTL(Register Transfer Level)&lt;/a&gt; designs. It is an evolving collection highlighting my projects, skills, and achievements in digital circuit design and verification. I specialize in developing efficient, high-performance hardware architectures using industry-standard languages like &lt;a href=&#34;https://ieeexplore.ieee.org/document/10458102&#34;&gt;SystemVerilog&lt;/a&gt; and &lt;a href=&#34;https://accellera.org/images/downloads/standards/v-ams/VAMS-LRM-2023.pdf&#34;&gt;Verilog&lt;/a&gt;. Explore my blog for insightful articles on the latest trends and best practices in RTL design, and visit the tutorials section for step-by-step guides to mastering this critical aspect of hardware engineering. Connect with me to collaborate on innovative solutions and advance your knowledge in RTL design.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Emacs Display Image</title>
      <link>https://24x7fpga.com/emacs_directory/2024_05_31_12_47_08_emacs_display_image/</link>
      <pubDate>Fri, 31 May 2024 12:47:00 -0400</pubDate>
      <guid>https://24x7fpga.com/emacs_directory/2024_05_31_12_47_08_emacs_display_image/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://orgmode.org/manual/Images.html&#34;&gt;Reference1&lt;/a&gt;, &lt;a href=&#34;https://emacs.stackexchange.com/questions/10114/org-mode-no-images-to-display-inline&#34;&gt;Reference2&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;how-to-include-an-image-in-emacs&#34;&gt;How to include an image in emacs?&lt;/h2&gt;
&lt;p&gt;Simple way to include images in an org document is by using the following command:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-quote&#34; data-lang=&#34;quote&#34;&gt;[[ ./path/to/image.png ]]
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;how-to-display-the-image-in-emacs&#34;&gt;How to display the image in emacs?&lt;/h2&gt;
&lt;p&gt;To display an inline image in emacs org file simply type &amp;quot; C-c C-x C-v&amp;quot;. The same command is used to toggle the display.&lt;/p&gt;
&lt;h2 id=&#34;how-to-add-caption-and-label-to-the-image&#34;&gt;How to add caption and label to the image?&lt;/h2&gt;
&lt;p&gt;To include the caption and label to the name it is necessary to have the image link in the separate line and add &amp;quot; #+caption and #+name: &amp;quot; before the link. See the example for reference:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Vim Find and Replace</title>
      <link>https://24x7fpga.com/vim_directory/2024_05_30_20_45_11-vim_find_and_replace/</link>
      <pubDate>Thu, 30 May 2024 20:45:00 -0400</pubDate>
      <guid>https://24x7fpga.com/vim_directory/2024_05_30_20_45_11-vim_find_and_replace/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://linuxize.com/post/vim-find-replace/&#34;&gt;Reference&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;find-and-replace-command&#34;&gt;Find and Replace Command&lt;/h2&gt;
&lt;p&gt;The command to find and replace a word in a document is by the use of :subtitute (:S) command. The basic command is as follows:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;:[range]s/{pattern}/{string}/[flags] [count]
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;[range] = the word to be replaced will be searched within this specified lines.&lt;/li&gt;
&lt;li&gt;{pattern} = the word that has to be replaced&lt;/li&gt;
&lt;li&gt;{string} = the new replaced word&lt;/li&gt;
&lt;li&gt;[flags] = is constraint for the command&lt;/li&gt;
&lt;li&gt;[count] = is a postive number that mutliplies the command&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note: To replace a special charater use &amp;ldquo;\&amp;rdquo; before the character, for example, to replace $apple =&amp;gt; ^orange use &amp;quot;&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://24x7fpga.com/about/about/</link>
      <pubDate>Thu, 07 Mar 2024 00:00:00 +0000</pubDate>
      <guid>https://24x7fpga.com/about/about/</guid>
      <description>&lt;h1 id=&#34;hi-there-&#34;&gt;Hi there 👋.&lt;/h1&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://user-images.githubusercontent.com/34355273/89976131-a2260700-dc35-11ea-8b5d-8a62fd78734a.png&#34; alt=&#34;fpga&#34;  /&gt;
&lt;/p&gt;
&lt;h3 id=&#34;im-kiran&#34;&gt;I&amp;rsquo;m Kiran.&lt;/h3&gt;
&lt;p&gt;I work as Graduate Research Assistant at Wright State University currently pursuing my Doctoral degree.&lt;/p&gt;
&lt;p&gt;My background includes Digital Design, RTL design, FPGA prototyping, Circuit design, and I have worked as a graduate teaching assistant while pursuing a Master’s Degree in Electrical Engineering.&lt;/p&gt;
&lt;p&gt;As a teaching assistant I Instructed students in modeling digital systems using hardware descriptive language. Implemented and tested the designs on FPGAs. Evaluated the student&amp;rsquo;s performance based on quizzes and graded them accordingly for Digital Integrated Circuit Design Lab.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>